// Code generated by MockGen. DO NOT EDIT.
// Source: ./ledger/ledger.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	common "github.com/TopiaNetwork/topia/common"
	block "github.com/TopiaNetwork/topia/ledger/block"
	meta "github.com/TopiaNetwork/topia/ledger/meta"
	state "github.com/TopiaNetwork/topia/ledger/state"
	gomock "github.com/golang/mock/gomock"
)

// MockLedger is a mock of Ledger interface.
type MockLedger struct {
	ctrl     *gomock.Controller
	recorder *MockLedgerMockRecorder
}

// MockLedgerMockRecorder is the mock recorder for MockLedger.
type MockLedgerMockRecorder struct {
	mock *MockLedger
}

// NewMockLedger creates a new mock instance.
func NewMockLedger(ctrl *gomock.Controller) *MockLedger {
	mock := &MockLedger{ctrl: ctrl}
	mock.recorder = &MockLedgerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLedger) EXPECT() *MockLedgerMockRecorder {
	return m.recorder
}

// CreateMetaStore mocks base method.
func (m *MockLedger) CreateMetaStore() (meta.MetaStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetaStore")
	ret0, _ := ret[0].(meta.MetaStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMetaStore indicates an expected call of CreateMetaStore.
func (mr *MockLedgerMockRecorder) CreateMetaStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetaStore", reflect.TypeOf((*MockLedger)(nil).CreateMetaStore))
}

// CreateStateStore mocks base method.
func (m *MockLedger) CreateStateStore() (state.StateStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateStore")
	ret0, _ := ret[0].(state.StateStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateStore indicates an expected call of CreateStateStore.
func (mr *MockLedgerMockRecorder) CreateStateStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateStore", reflect.TypeOf((*MockLedger)(nil).CreateStateStore))
}

// CreateStateStoreReadonly mocks base method.
func (m *MockLedger) CreateStateStoreReadonly() (state.StateStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateStoreReadonly")
	ret0, _ := ret[0].(state.StateStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateStoreReadonly indicates an expected call of CreateStateStoreReadonly.
func (mr *MockLedgerMockRecorder) CreateStateStoreReadonly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateStoreReadonly", reflect.TypeOf((*MockLedger)(nil).CreateStateStoreReadonly))
}

// CreateStateStoreReadonlyAt mocks base method.
func (m *MockLedger) CreateStateStoreReadonlyAt(version uint64) (state.StateStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStateStoreReadonlyAt", version)
	ret0, _ := ret[0].(state.StateStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStateStoreReadonlyAt indicates an expected call of CreateStateStoreReadonlyAt.
func (mr *MockLedgerMockRecorder) CreateStateStoreReadonlyAt(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStateStoreReadonlyAt", reflect.TypeOf((*MockLedger)(nil).CreateStateStoreReadonlyAt), version)
}

// GetBlockStore mocks base method.
func (m *MockLedger) GetBlockStore() block.BlockStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStore")
	ret0, _ := ret[0].(block.BlockStore)
	return ret0
}

// GetBlockStore indicates an expected call of GetBlockStore.
func (mr *MockLedgerMockRecorder) GetBlockStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStore", reflect.TypeOf((*MockLedger)(nil).GetBlockStore))
}

// ID mocks base method.
func (m *MockLedger) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockLedgerMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockLedger)(nil).ID))
}

// PendingStateStore mocks base method.
func (m *MockLedger) PendingStateStore() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStateStore")
	ret0, _ := ret[0].(int32)
	return ret0
}

// PendingStateStore indicates an expected call of PendingStateStore.
func (mr *MockLedgerMockRecorder) PendingStateStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStateStore", reflect.TypeOf((*MockLedger)(nil).PendingStateStore))
}

// State mocks base method.
func (m *MockLedger) State() common.LedgerState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(common.LedgerState)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockLedgerMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockLedger)(nil).State))
}

// UpdateState mocks base method.
func (m *MockLedger) UpdateState(state common.LedgerState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateState", state)
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockLedgerMockRecorder) UpdateState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockLedger)(nil).UpdateState), state)
}
