// Code generated by MockGen. DO NOT EDIT.
// Source: servant.go

// Package transactionpool is a generated GoMock package.
package transactionpool

import (
	reflect "reflect"

	types "github.com/TopiaNetwork/topia/chain/types"
	p2p "github.com/TopiaNetwork/topia/network/p2p"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionPoolServant is a mock of TransactionPoolServant interface.
type MockTransactionPoolServant struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPoolServantMockRecorder
}

// MockTransactionPoolServantMockRecorder is the mock recorder for MockTransactionPoolServant.
type MockTransactionPoolServantMockRecorder struct {
	mock *MockTransactionPoolServant
}

// NewMockTransactionPoolServant creates a new mock instance.
func NewMockTransactionPoolServant(ctrl *gomock.Controller) *MockTransactionPoolServant {
	mock := &MockTransactionPoolServant{ctrl: ctrl}
	mock.recorder = &MockTransactionPoolServantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPoolServant) EXPECT() *MockTransactionPoolServantMockRecorder {
	return m.recorder
}

// CurrentBlock mocks base method.
func (m *MockTransactionPoolServant) CurrentBlock() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentBlock")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// CurrentBlock indicates an expected call of CurrentBlock.
func (mr *MockTransactionPoolServantMockRecorder) CurrentBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentBlock", reflect.TypeOf((*MockTransactionPoolServant)(nil).CurrentBlock))
}

// GetBlock mocks base method.
func (m *MockTransactionPoolServant) GetBlock(hash types.BlockHash, num uint64) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash, num)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockTransactionPoolServantMockRecorder) GetBlock(hash, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockTransactionPoolServant)(nil).GetBlock), hash, num)
}

// GetMaxGasLimit mocks base method.
func (m *MockTransactionPoolServant) GetMaxGasLimit() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxGasLimit")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetMaxGasLimit indicates an expected call of GetMaxGasLimit.
func (mr *MockTransactionPoolServantMockRecorder) GetMaxGasLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxGasLimit", reflect.TypeOf((*MockTransactionPoolServant)(nil).GetMaxGasLimit))
}

// StateAt mocks base method.
func (m *MockTransactionPoolServant) StateAt(root types.BlockHash) (*StatePoolDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAt", root)
	ret0, _ := ret[0].(*StatePoolDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAt indicates an expected call of StateAt.
func (mr *MockTransactionPoolServantMockRecorder) StateAt(root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAt", reflect.TypeOf((*MockTransactionPoolServant)(nil).StateAt), root)
}

// SubChainHeadEvent mocks base method.
func (m *MockTransactionPoolServant) SubChainHeadEvent(ch chan<- ChainHeadEvent) p2p.P2PPubSubService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubChainHeadEvent", ch)
	ret0, _ := ret[0].(p2p.P2PPubSubService)
	return ret0
}

// SubChainHeadEvent indicates an expected call of SubChainHeadEvent.
func (mr *MockTransactionPoolServantMockRecorder) SubChainHeadEvent(ch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubChainHeadEvent", reflect.TypeOf((*MockTransactionPoolServant)(nil).SubChainHeadEvent), ch)
}
