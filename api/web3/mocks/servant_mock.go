// Code generated by MockGen. DO NOT EDIT.
// Source: api/servant/servant.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"github.com/TopiaNetwork/topia/common"
	big "math/big"
	reflect "reflect"

	types "github.com/TopiaNetwork/topia/chain/types"
	types0 "github.com/TopiaNetwork/topia/crypt/types"
	currency "github.com/TopiaNetwork/topia/currency"
	basic "github.com/TopiaNetwork/topia/transaction/basic"
	gomock "github.com/golang/mock/gomock"
)

// MockAPIServant is a mock of APIServant interface.
type MockAPIServant struct {
	ctrl     *gomock.Controller
	recorder *MockAPIServantMockRecorder
}

// MockAPIServantMockRecorder is the mock recorder for MockAPIServant.
type MockAPIServantMockRecorder struct {
	mock *MockAPIServant
}

// NewMockAPIServant creates a new mock instance.
func NewMockAPIServant(ctrl *gomock.Controller) *MockAPIServant {
	mock := &MockAPIServant{ctrl: ctrl}
	mock.recorder = &MockAPIServantMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIServant) EXPECT() *MockAPIServantMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockAPIServant) ChainID() types.ChainID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(types.ChainID)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockAPIServantMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockAPIServant)(nil).ChainID))
}

// EstimateGas mocks base method.
func (m *MockAPIServant) EstimateGas(tx *basic.Transaction) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", tx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockAPIServantMockRecorder) EstimateGas(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockAPIServant)(nil).EstimateGas), tx)
}

// ExecuteTxSim mocks base method.
func (m *MockAPIServant) ExecuteTxSim(ctx context.Context, tx *basic.Transaction) (*basic.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTxSim", ctx, tx)
	ret0, _ := ret[0].(*basic.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteTxSim indicates an expected call of ExecuteTxSim.
func (mr *MockAPIServantMockRecorder) ExecuteTxSim(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTxSim", reflect.TypeOf((*MockAPIServant)(nil).ExecuteTxSim), ctx, tx)
}

// ForwardTxAsync mocks base method.
func (m *MockAPIServant) ForwardTxAsync(ctx context.Context, tx *basic.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardTxAsync", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForwardTxAsync indicates an expected call of ForwardTxAsync.
func (mr *MockAPIServantMockRecorder) ForwardTxAsync(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardTxAsync", reflect.TypeOf((*MockAPIServant)(nil).ForwardTxAsync), ctx, tx)
}

// ForwardTxSync mocks base method.
func (m *MockAPIServant) ForwardTxSync(ctx context.Context, tx *basic.Transaction) (*basic.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForwardTxSync", ctx, tx)
	ret0, _ := ret[0].(*basic.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForwardTxSync indicates an expected call of ForwardTxSync.
func (mr *MockAPIServantMockRecorder) ForwardTxSync(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForwardTxSync", reflect.TypeOf((*MockAPIServant)(nil).ForwardTxSync), ctx, tx)
}

// GetBalance mocks base method.
func (m *MockAPIServant) GetBalance(symbol currency.TokenSymbol, addr types0.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", symbol, addr)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockAPIServantMockRecorder) GetBalance(symbol, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockAPIServant)(nil).GetBalance), symbol, addr)
}

// GetBlockByHash mocks base method.
func (m *MockAPIServant) GetBlockByHash(hashHex string) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hashHex)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockAPIServantMockRecorder) GetBlockByHash(hashHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockAPIServant)(nil).GetBlockByHash), hashHex)
}

// GetBlockByHeight mocks base method.
func (m *MockAPIServant) GetBlockByHeight(height uint64) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight.
func (mr *MockAPIServantMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockAPIServant)(nil).GetBlockByHeight), height)
}

// GetBlockByTxHash mocks base method.
func (m *MockAPIServant) GetBlockByTxHash(txHashHex string) (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByTxHash", txHashHex)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByTxHash indicates an expected call of GetBlockByTxHash.
func (mr *MockAPIServantMockRecorder) GetBlockByTxHash(txHashHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByTxHash", reflect.TypeOf((*MockAPIServant)(nil).GetBlockByTxHash), txHashHex)
}

// GetContractCode mocks base method.
func (m *MockAPIServant) GetContractCode(addr types0.Address, height uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractCode", addr, height)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractCode indicates an expected call of GetContractCode.
func (mr *MockAPIServantMockRecorder) GetContractCode(addr, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractCode", reflect.TypeOf((*MockAPIServant)(nil).GetContractCode), addr, height)
}

// GetLatestBlock mocks base method.
func (m *MockAPIServant) GetLatestBlock() (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockAPIServantMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockAPIServant)(nil).GetLatestBlock))
}

// GetNonce mocks base method.
func (m *MockAPIServant) GetNonce(addr types0.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", addr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockAPIServantMockRecorder) GetNonce(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockAPIServant)(nil).GetNonce), addr)
}

// GetTransactionByHash mocks base method.
func (m *MockAPIServant) GetTransactionByHash(txHashHex string) (*basic.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", txHashHex)
	ret0, _ := ret[0].(*basic.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash.
func (mr *MockAPIServantMockRecorder) GetTransactionByHash(txHashHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockAPIServant)(nil).GetTransactionByHash), txHashHex)
}

// GetTransactionCount mocks base method.
func (m *MockAPIServant) GetTransactionCount(addr types0.Address, height uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionCount", addr, height)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionCount indicates an expected call of GetTransactionCount.
func (mr *MockAPIServantMockRecorder) GetTransactionCount(addr, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionCount", reflect.TypeOf((*MockAPIServant)(nil).GetTransactionCount), addr, height)
}

// GetTransactionResultByHash mocks base method.
func (m *MockAPIServant) GetTransactionResultByHash(txHashHex string) (*basic.TransactionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionResultByHash", txHashHex)
	ret0, _ := ret[0].(*basic.TransactionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionResultByHash indicates an expected call of GetTransactionResultByHash.
func (mr *MockAPIServantMockRecorder) GetTransactionResultByHash(txHashHex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionResultByHash", reflect.TypeOf((*MockAPIServant)(nil).GetTransactionResultByHash), txHashHex)
}

// NetworkType mocks base method.
func (m *MockAPIServant) NetworkType() common.NetworkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkType")
	ret0, _ := ret[0].(common.NetworkType)
	return ret0
}

// NetworkType indicates an expected call of NetworkType.
func (mr *MockAPIServantMockRecorder) NetworkType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkType", reflect.TypeOf((*MockAPIServant)(nil).NetworkType))
}
