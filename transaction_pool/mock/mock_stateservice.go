// Code generated by MockGen. DO NOT EDIT.
// Source: ./service/state.go

// Package transactionpool is a generated GoMock package.
package mock

import (
	big "math/big"
	reflect "reflect"

	account "github.com/TopiaNetwork/topia/account"
	types "github.com/TopiaNetwork/topia/chain/types"
	common "github.com/TopiaNetwork/topia/common"
	types0 "github.com/TopiaNetwork/topia/crypt/types"
	currency "github.com/TopiaNetwork/topia/currency"
	gomock "github.com/golang/mock/gomock"
)

// MockStateQueryService is a mock of StateQueryService interface.
type MockStateQueryService struct {
	ctrl     *gomock.Controller
	recorder *MockStateQueryServiceMockRecorder
}

// MockStateQueryServiceMockRecorder is the mock recorder for MockStateQueryService.
type MockStateQueryServiceMockRecorder struct {
	mock *MockStateQueryService
}

// NewMockStateQueryService creates a new mock instance.
func NewMockStateQueryService(ctrl *gomock.Controller) *MockStateQueryService {
	mock := &MockStateQueryService{ctrl: ctrl}
	mock.recorder = &MockStateQueryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateQueryService) EXPECT() *MockStateQueryServiceMockRecorder {
	return m.recorder
}

// ChainID mocks base method.
func (m *MockStateQueryService) ChainID() types.ChainID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID")
	ret0, _ := ret[0].(types.ChainID)
	return ret0
}

// ChainID indicates an expected call of ChainID.
func (mr *MockStateQueryServiceMockRecorder) ChainID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockStateQueryService)(nil).ChainID))
}

// GetAccount mocks base method.
func (m *MockStateQueryService) GetAccount(addr types0.Address) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", addr)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockStateQueryServiceMockRecorder) GetAccount(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockStateQueryService)(nil).GetAccount), addr)
}

// GetActiveExecutorIDs mocks base method.
func (m *MockStateQueryService) GetActiveExecutorIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutorIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveExecutorIDs indicates an expected call of GetActiveExecutorIDs.
func (mr *MockStateQueryServiceMockRecorder) GetActiveExecutorIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutorIDs", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveExecutorIDs))
}

// GetActiveExecutorsTotalWeight mocks base method.
func (m *MockStateQueryService) GetActiveExecutorsTotalWeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutorsTotalWeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveExecutorsTotalWeight indicates an expected call of GetActiveExecutorsTotalWeight.
func (mr *MockStateQueryServiceMockRecorder) GetActiveExecutorsTotalWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutorsTotalWeight", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveExecutorsTotalWeight))
}

// GetActiveProposerIDs mocks base method.
func (m *MockStateQueryService) GetActiveProposerIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProposerIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProposerIDs indicates an expected call of GetActiveProposerIDs.
func (mr *MockStateQueryServiceMockRecorder) GetActiveProposerIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProposerIDs", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveProposerIDs))
}

// GetActiveProposersTotalWeight mocks base method.
func (m *MockStateQueryService) GetActiveProposersTotalWeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveProposersTotalWeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveProposersTotalWeight indicates an expected call of GetActiveProposersTotalWeight.
func (mr *MockStateQueryServiceMockRecorder) GetActiveProposersTotalWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveProposersTotalWeight", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveProposersTotalWeight))
}

// GetActiveValidatorIDs mocks base method.
func (m *MockStateQueryService) GetActiveValidatorIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveValidatorIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveValidatorIDs indicates an expected call of GetActiveValidatorIDs.
func (mr *MockStateQueryServiceMockRecorder) GetActiveValidatorIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveValidatorIDs", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveValidatorIDs))
}

// GetActiveValidatorsTotalWeight mocks base method.
func (m *MockStateQueryService) GetActiveValidatorsTotalWeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveValidatorsTotalWeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveValidatorsTotalWeight indicates an expected call of GetActiveValidatorsTotalWeight.
func (mr *MockStateQueryServiceMockRecorder) GetActiveValidatorsTotalWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveValidatorsTotalWeight", reflect.TypeOf((*MockStateQueryService)(nil).GetActiveValidatorsTotalWeight))
}

// GetAllAccounts mocks base method.
func (m *MockStateQueryService) GetAllAccounts() ([]*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts")
	ret0, _ := ret[0].([]*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockStateQueryServiceMockRecorder) GetAllAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockStateQueryService)(nil).GetAllAccounts))
}

// GetAllActiveExecutors mocks base method.
func (m *MockStateQueryService) GetAllActiveExecutors() ([]*common.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveExecutors")
	ret0, _ := ret[0].([]*common.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveExecutors indicates an expected call of GetAllActiveExecutors.
func (mr *MockStateQueryServiceMockRecorder) GetAllActiveExecutors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveExecutors", reflect.TypeOf((*MockStateQueryService)(nil).GetAllActiveExecutors))
}

// GetAllActiveProposers mocks base method.
func (m *MockStateQueryService) GetAllActiveProposers() ([]*common.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveProposers")
	ret0, _ := ret[0].([]*common.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveProposers indicates an expected call of GetAllActiveProposers.
func (mr *MockStateQueryServiceMockRecorder) GetAllActiveProposers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveProposers", reflect.TypeOf((*MockStateQueryService)(nil).GetAllActiveProposers))
}

// GetAllActiveValidators mocks base method.
func (m *MockStateQueryService) GetAllActiveValidators() ([]*common.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveValidators")
	ret0, _ := ret[0].([]*common.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveValidators indicates an expected call of GetAllActiveValidators.
func (mr *MockStateQueryServiceMockRecorder) GetAllActiveValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveValidators", reflect.TypeOf((*MockStateQueryService)(nil).GetAllActiveValidators))
}

// GetAllConsensusNodeIDs mocks base method.
func (m *MockStateQueryService) GetAllConsensusNodeIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConsensusNodeIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConsensusNodeIDs indicates an expected call of GetAllConsensusNodeIDs.
func (mr *MockStateQueryServiceMockRecorder) GetAllConsensusNodeIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConsensusNodeIDs", reflect.TypeOf((*MockStateQueryService)(nil).GetAllConsensusNodeIDs))
}

// GetAllInactiveNodes mocks base method.
func (m *MockStateQueryService) GetAllInactiveNodes() ([]*common.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllInactiveNodes")
	ret0, _ := ret[0].([]*common.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllInactiveNodes indicates an expected call of GetAllInactiveNodes.
func (mr *MockStateQueryServiceMockRecorder) GetAllInactiveNodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllInactiveNodes", reflect.TypeOf((*MockStateQueryService)(nil).GetAllInactiveNodes))
}

// GetBalance mocks base method.
func (m *MockStateQueryService) GetBalance(addr types0.Address, symbol currency.TokenSymbol) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", addr, symbol)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockStateQueryServiceMockRecorder) GetBalance(addr, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockStateQueryService)(nil).GetBalance), addr, symbol)
}

// GetInactiveNodeIDs mocks base method.
func (m *MockStateQueryService) GetInactiveNodeIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInactiveNodeIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInactiveNodeIDs indicates an expected call of GetInactiveNodeIDs.
func (mr *MockStateQueryServiceMockRecorder) GetInactiveNodeIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInactiveNodeIDs", reflect.TypeOf((*MockStateQueryService)(nil).GetInactiveNodeIDs))
}

// GetLatestBlock mocks base method.
func (m *MockStateQueryService) GetLatestBlock() (*types.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock.
func (mr *MockStateQueryServiceMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockStateQueryService)(nil).GetLatestBlock))
}

// GetLatestBlockResult mocks base method.
func (m *MockStateQueryService) GetLatestBlockResult() (*types.BlockResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlockResult")
	ret0, _ := ret[0].(*types.BlockResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlockResult indicates an expected call of GetLatestBlockResult.
func (mr *MockStateQueryServiceMockRecorder) GetLatestBlockResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlockResult", reflect.TypeOf((*MockStateQueryService)(nil).GetLatestBlockResult))
}

// GetLatestEpoch mocks base method.
func (m *MockStateQueryService) GetLatestEpoch() (*common.EpochInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestEpoch")
	ret0, _ := ret[0].(*common.EpochInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestEpoch indicates an expected call of GetLatestEpoch.
func (mr *MockStateQueryServiceMockRecorder) GetLatestEpoch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestEpoch", reflect.TypeOf((*MockStateQueryService)(nil).GetLatestEpoch))
}

// GetNode mocks base method.
func (m *MockStateQueryService) GetNode(nodeID string) (*common.NodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", nodeID)
	ret0, _ := ret[0].(*common.NodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStateQueryServiceMockRecorder) GetNode(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStateQueryService)(nil).GetNode), nodeID)
}

// GetNodeWeight mocks base method.
func (m *MockStateQueryService) GetNodeWeight(nodeID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeWeight", nodeID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeWeight indicates an expected call of GetNodeWeight.
func (mr *MockStateQueryServiceMockRecorder) GetNodeWeight(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeWeight", reflect.TypeOf((*MockStateQueryService)(nil).GetNodeWeight), nodeID)
}

// GetNonce mocks base method.
func (m *MockStateQueryService) GetNonce(addr types0.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonce", addr)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonce indicates an expected call of GetNonce.
func (mr *MockStateQueryServiceMockRecorder) GetNonce(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonce", reflect.TypeOf((*MockStateQueryService)(nil).GetNonce), addr)
}

// GetTotalWeight mocks base method.
func (m *MockStateQueryService) GetTotalWeight() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalWeight")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalWeight indicates an expected call of GetTotalWeight.
func (mr *MockStateQueryServiceMockRecorder) GetTotalWeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalWeight", reflect.TypeOf((*MockStateQueryService)(nil).GetTotalWeight))
}

// NetworkType mocks base method.
func (m *MockStateQueryService) NetworkType() common.NetworkType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NetworkType")
	ret0, _ := ret[0].(common.NetworkType)
	return ret0
}

// NetworkType indicates an expected call of NetworkType.
func (mr *MockStateQueryServiceMockRecorder) NetworkType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NetworkType", reflect.TypeOf((*MockStateQueryService)(nil).NetworkType))
}

// PendingStateStore mocks base method.
func (m *MockStateQueryService) PendingStateStore() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStateStore")
	ret0, _ := ret[0].(int32)
	return ret0
}

// PendingStateStore indicates an expected call of PendingStateStore.
func (mr *MockStateQueryServiceMockRecorder) PendingStateStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStateStore", reflect.TypeOf((*MockStateQueryService)(nil).PendingStateStore))
}

// StateLatestVersion mocks base method.
func (m *MockStateQueryService) StateLatestVersion() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateLatestVersion")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateLatestVersion indicates an expected call of StateLatestVersion.
func (mr *MockStateQueryServiceMockRecorder) StateLatestVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateLatestVersion", reflect.TypeOf((*MockStateQueryService)(nil).StateLatestVersion))
}

// StateRoot mocks base method.
func (m *MockStateQueryService) StateRoot() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateRoot")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateRoot indicates an expected call of StateRoot.
func (mr *MockStateQueryServiceMockRecorder) StateRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateRoot", reflect.TypeOf((*MockStateQueryService)(nil).StateRoot))
}

// StateVersions mocks base method.
func (m *MockStateQueryService) StateVersions() ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateVersions")
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateVersions indicates an expected call of StateVersions.
func (mr *MockStateQueryServiceMockRecorder) StateVersions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateVersions", reflect.TypeOf((*MockStateQueryService)(nil).StateVersions))
}
