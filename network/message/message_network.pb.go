// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_network.proto

package message

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkMessage struct {
	FromPeerID           string   `protobuf:"bytes,1,opt,name=FromPeerID,proto3" json:"fromPeerID"`
	TargetPeerIDs        []string `protobuf:"bytes,2,rep,name=TargetPeerIDs,proto3" json:"targetPeerIDs"`
	ProtocolID           string   `protobuf:"bytes,3,opt,name=ProtocolID,proto3" json:"protocolID"`
	ModuleName           string   `protobuf:"bytes,4,opt,name=ModuleName,proto3" json:"moduleName"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkMessage) Reset()         { *m = NetworkMessage{} }
func (m *NetworkMessage) String() string { return proto.CompactTextString(m) }
func (*NetworkMessage) ProtoMessage()    {}
func (*NetworkMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea16969c83ac4c6b, []int{0}
}
func (m *NetworkMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMessage.Merge(m, src)
}
func (m *NetworkMessage) XXX_Size() int {
	return m.Size()
}
func (m *NetworkMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMessage proto.InternalMessageInfo

func (m *NetworkMessage) GetFromPeerID() string {
	if m != nil {
		return m.FromPeerID
	}
	return ""
}

func (m *NetworkMessage) GetTargetPeerIDs() []string {
	if m != nil {
		return m.TargetPeerIDs
	}
	return nil
}

func (m *NetworkMessage) GetProtocolID() string {
	if m != nil {
		return m.ProtocolID
	}
	return ""
}

func (m *NetworkMessage) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *NetworkMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type NetworkPubSubMessage struct {
	FromPeerID           string   `protobuf:"bytes,1,opt,name=FromPeerID,proto3" json:"fromPeerID"`
	Topic                string   `protobuf:"bytes,2,opt,name=Topic,proto3" json:"topic"`
	ModuleNames          []string `protobuf:"bytes,3,rep,name=ModuleNames,proto3" json:"moduleNames"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkPubSubMessage) Reset()         { *m = NetworkPubSubMessage{} }
func (m *NetworkPubSubMessage) String() string { return proto.CompactTextString(m) }
func (*NetworkPubSubMessage) ProtoMessage()    {}
func (*NetworkPubSubMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea16969c83ac4c6b, []int{1}
}
func (m *NetworkPubSubMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPubSubMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *NetworkPubSubMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPubSubMessage.Merge(m, src)
}
func (m *NetworkPubSubMessage) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPubSubMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPubSubMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPubSubMessage proto.InternalMessageInfo

func (m *NetworkPubSubMessage) GetFromPeerID() string {
	if m != nil {
		return m.FromPeerID
	}
	return ""
}

func (m *NetworkPubSubMessage) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *NetworkPubSubMessage) GetModuleNames() []string {
	if m != nil {
		return m.ModuleNames
	}
	return nil
}

func (m *NetworkPubSubMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkMessage)(nil), "proto.NetworkMessage")
	proto.RegisterType((*NetworkPubSubMessage)(nil), "proto.NetworkPubSubMessage")
}

func init() { proto.RegisterFile("message_network.proto", fileDescriptor_ea16969c83ac4c6b) }

var fileDescriptor_ea16969c83ac4c6b = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x8d, 0xcf, 0x4b, 0x2d, 0x29, 0xcf, 0x2f, 0xca, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x5c, 0xe9, 0xf9, 0xe9, 0xf9, 0x10, 0x21, 0xa5, 0xef, 0x8c,
	0x5c, 0x7c, 0x7e, 0x10, 0x45, 0xbe, 0x10, 0x3d, 0x42, 0x7a, 0x5c, 0x5c, 0x6e, 0x45, 0xf9, 0xb9,
	0x01, 0xa9, 0xa9, 0x45, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x4e, 0x7c, 0xaf, 0xee,
	0xc9, 0x73, 0xa5, 0xc1, 0x45, 0x83, 0x90, 0x54, 0x08, 0x99, 0x73, 0xf1, 0x86, 0x24, 0x16, 0xa5,
	0xa7, 0x96, 0x40, 0xf8, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x9c, 0x4e, 0x82, 0xaf, 0xee, 0xc9,
	0xf3, 0x96, 0x20, 0x4b, 0x04, 0xa1, 0xaa, 0x03, 0x59, 0x14, 0x00, 0x72, 0x44, 0x72, 0x7e, 0x8e,
	0xa7, 0x8b, 0x04, 0x33, 0xc2, 0xa2, 0x02, 0xb8, 0x68, 0x10, 0x92, 0x0a, 0x90, 0x7a, 0xdf, 0xfc,
	0x94, 0xd2, 0x9c, 0x54, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x16, 0x84, 0xfa, 0x5c, 0xb8, 0x68, 0x10,
	0x92, 0x0a, 0x21, 0x19, 0x2e, 0x16, 0x97, 0xc4, 0x92, 0x44, 0x09, 0x56, 0x05, 0x46, 0x0d, 0x1e,
	0x27, 0x8e, 0x57, 0xf7, 0xe4, 0x59, 0x52, 0x12, 0x4b, 0x12, 0x83, 0xc0, 0xa2, 0x4a, 0x3b, 0x18,
	0xb9, 0x44, 0xa0, 0x3e, 0x0f, 0x28, 0x4d, 0x0a, 0x2e, 0x4d, 0x22, 0xd7, 0xff, 0xf2, 0x5c, 0xac,
	0x21, 0xf9, 0x05, 0x99, 0xc9, 0x12, 0x4c, 0x60, 0xa5, 0x9c, 0xaf, 0xee, 0xc9, 0xb3, 0x96, 0x80,
	0x04, 0x82, 0x20, 0xe2, 0x42, 0x86, 0x5c, 0xdc, 0x08, 0x57, 0x15, 0x4b, 0x30, 0x83, 0x83, 0x87,
	0xff, 0xd5, 0x3d, 0x79, 0x6e, 0x84, 0xc3, 0x8b, 0x83, 0x90, 0xd5, 0xc0, 0x9d, 0xce, 0x82, 0xcd,
	0xe9, 0x4e, 0xb2, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0x78, 0xe3, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0x43, 0x23, 0x3d, 0x89, 0x0d, 0x1c,
	0x7e, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xe8, 0x7f, 0x7d, 0x06, 0x02, 0x00, 0x00,
}

func (m *NetworkMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ModuleName) > 0 {
		i -= len(m.ModuleName)
		copy(dAtA[i:], m.ModuleName)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.ModuleName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProtocolID) > 0 {
		i -= len(m.ProtocolID)
		copy(dAtA[i:], m.ProtocolID)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.ProtocolID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TargetPeerIDs) > 0 {
		for iNdEx := len(m.TargetPeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TargetPeerIDs[iNdEx])
			copy(dAtA[i:], m.TargetPeerIDs[iNdEx])
			i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.TargetPeerIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FromPeerID) > 0 {
		i -= len(m.FromPeerID)
		copy(dAtA[i:], m.FromPeerID)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.FromPeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPubSubMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPubSubMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPubSubMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleNames) > 0 {
		for iNdEx := len(m.ModuleNames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ModuleNames[iNdEx])
			copy(dAtA[i:], m.ModuleNames[iNdEx])
			i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.ModuleNames[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromPeerID) > 0 {
		i -= len(m.FromPeerID)
		copy(dAtA[i:], m.FromPeerID)
		i = encodeVarintMessageNetwork(dAtA, i, uint64(len(m.FromPeerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageNetwork(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageNetwork(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPeerID)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	if len(m.TargetPeerIDs) > 0 {
		for _, s := range m.TargetPeerIDs {
			l = len(s)
			n += 1 + l + sovMessageNetwork(uint64(l))
		}
	}
	l = len(m.ProtocolID)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	l = len(m.ModuleName)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NetworkPubSubMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromPeerID)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	if len(m.ModuleNames) > 0 {
		for _, s := range m.ModuleNames {
			l = len(s)
			n += 1 + l + sovMessageNetwork(uint64(l))
		}
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessageNetwork(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageNetwork(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageNetwork(x uint64) (n int) {
	return sovMessageNetwork(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPeerIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPeerIDs = append(m.TargetPeerIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProtocolID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPubSubMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageNetwork
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPubSubMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPubSubMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromPeerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleNames = append(m.ModuleNames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageNetwork(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageNetwork
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageNetwork(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageNetwork
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageNetwork
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageNetwork
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageNetwork
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageNetwork
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageNetwork        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageNetwork          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageNetwork = fmt.Errorf("proto: unexpected end of group")
)
