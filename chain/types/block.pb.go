// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: block.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlockResultHead_ResultStatus int32

const (
	BlockResultHead_OK  BlockResultHead_ResultStatus = 0
	BlockResultHead_Err BlockResultHead_ResultStatus = 1
)

var BlockResultHead_ResultStatus_name = map[int32]string{
	0: "OK",
	1: "Err",
}

var BlockResultHead_ResultStatus_value = map[string]int32{
	"OK":  0,
	"Err": 1,
}

func (x BlockResultHead_ResultStatus) String() string {
	return proto.EnumName(BlockResultHead_ResultStatus_name, int32(x))
}

func (BlockResultHead_ResultStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{8, 0}
}

type ChainMessage_Type int32

const (
	ChainMessage_Unknown   ChainMessage_Type = 0
	ChainMessage_Tx        ChainMessage_Type = 1
	ChainMessage_BlockInfo ChainMessage_Type = 2
)

var ChainMessage_Type_name = map[int32]string{
	0: "Unknown",
	1: "Tx",
	2: "BlockInfo",
}

var ChainMessage_Type_value = map[string]int32{
	"Unknown":   0,
	"Tx":        1,
	"BlockInfo": 2,
}

func (x ChainMessage_Type) String() string {
	return proto.EnumName(ChainMessage_Type_name, int32(x))
}

func (ChainMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{12, 0}
}

type ConsensusProof struct {
	ParentBlockHash      []byte   `protobuf:"bytes,1,opt,name=ParentBlockHash,proto3" json:"parentBlockHash"`
	Height               uint64   `protobuf:"varint,2,opt,name=Height,proto3" json:"height"`
	AggSign              []byte   `protobuf:"bytes,3,opt,name=AggSign,proto3" json:"aggSign"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusProof) Reset()         { *m = ConsensusProof{} }
func (m *ConsensusProof) String() string { return proto.CompactTextString(m) }
func (*ConsensusProof) ProtoMessage()    {}
func (*ConsensusProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{0}
}
func (m *ConsensusProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusProof.Merge(m, src)
}
func (m *ConsensusProof) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusProof) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusProof.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusProof proto.InternalMessageInfo

func (m *ConsensusProof) GetParentBlockHash() []byte {
	if m != nil {
		return m.ParentBlockHash
	}
	return nil
}

func (m *ConsensusProof) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ConsensusProof) GetAggSign() []byte {
	if m != nil {
		return m.AggSign
	}
	return nil
}

type BlockHeadChunk struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	DomainID             []byte   `protobuf:"bytes,2,opt,name=DomainID,proto3" json:"domainID"`
	Launcher             []byte   `protobuf:"bytes,3,opt,name=Launcher,proto3" json:"launcher"`
	TxCount              uint32   `protobuf:"varint,4,opt,name=TxCount,proto3" json:"txCount"`
	TxRoot               []byte   `protobuf:"bytes,5,opt,name=TxRoot,proto3" json:"txRoot"`
	TxResultRoot         []byte   `protobuf:"bytes,6,opt,name=TxResultRoot,proto3" json:"txResultRoot"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHeadChunk) Reset()         { *m = BlockHeadChunk{} }
func (m *BlockHeadChunk) String() string { return proto.CompactTextString(m) }
func (*BlockHeadChunk) ProtoMessage()    {}
func (*BlockHeadChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{1}
}
func (m *BlockHeadChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeadChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockHeadChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeadChunk.Merge(m, src)
}
func (m *BlockHeadChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeadChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeadChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeadChunk proto.InternalMessageInfo

func (m *BlockHeadChunk) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeadChunk) GetDomainID() []byte {
	if m != nil {
		return m.DomainID
	}
	return nil
}

func (m *BlockHeadChunk) GetLauncher() []byte {
	if m != nil {
		return m.Launcher
	}
	return nil
}

func (m *BlockHeadChunk) GetTxCount() uint32 {
	if m != nil {
		return m.TxCount
	}
	return 0
}

func (m *BlockHeadChunk) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *BlockHeadChunk) GetTxResultRoot() []byte {
	if m != nil {
		return m.TxResultRoot
	}
	return nil
}

type BlockDataChunk struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	Txs                  [][]byte `protobuf:"bytes,2,rep,name=Txs,proto3" json:"txs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockDataChunk) Reset()         { *m = BlockDataChunk{} }
func (m *BlockDataChunk) String() string { return proto.CompactTextString(m) }
func (*BlockDataChunk) ProtoMessage()    {}
func (*BlockDataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{2}
}
func (m *BlockDataChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockDataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockDataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockDataChunk.Merge(m, src)
}
func (m *BlockDataChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlockDataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockDataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlockDataChunk proto.InternalMessageInfo

func (m *BlockDataChunk) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockDataChunk) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type BlockHead struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Height               uint64   `protobuf:"varint,3,opt,name=Height,proto3" json:"height"`
	Epoch                uint64   `protobuf:"varint,4,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,5,opt,name=Round,proto3" json:"round"`
	ParentBlockHash      []byte   `protobuf:"bytes,6,opt,name=ParentBlockHash,proto3" json:"parentBlockHash"`
	Proposer             []byte   `protobuf:"bytes,7,opt,name=Proposer,proto3" json:"proposer"`
	Proof                []byte   `protobuf:"bytes,8,opt,name=Proof,proto3" json:"proof"`
	VRFProof             []byte   `protobuf:"bytes,9,opt,name=VRFProof,proto3" json:"vrfProof"`
	VRFProofHeight       uint64   `protobuf:"varint,10,opt,name=VRFProofHeight,proto3" json:"vrfProofHeight"`
	MaxPri               []byte   `protobuf:"bytes,11,opt,name=MaxPri,proto3" json:"maxPri"`
	VoteAggSignature     []byte   `protobuf:"bytes,12,opt,name=VoteAggSignature,proto3" json:"voteAggSignature"`
	ChunkCount           uint32   `protobuf:"varint,13,opt,name=ChunkCount,proto3" json:"chunkCount"`
	HeadChunks           [][]byte `protobuf:"bytes,14,rep,name=HeadChunks,proto3" json:"headChunks"`
	StateRoot            []byte   `protobuf:"bytes,15,opt,name=StateRoot,proto3" json:"stateRoot"`
	GasFees              []byte   `protobuf:"bytes,16,opt,name=GasFees,proto3" json:"gasFees"`
	TimeStamp            uint64   `protobuf:"varint,17,opt,name=TimeStamp,proto3" json:"timeStamp"`
	ElapsedSpan          uint64   `protobuf:"varint,18,opt,name=ElapsedSpan,proto3" json:"elaspedSpan"`
	Hash                 []byte   `protobuf:"bytes,19,opt,name=Hash,proto3" json:"hash"`
	Reserved             []byte   `protobuf:"bytes,20,opt,name=Reserved,proto3" json:"reserved"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockHead) Reset()         { *m = BlockHead{} }
func (m *BlockHead) String() string { return proto.CompactTextString(m) }
func (*BlockHead) ProtoMessage()    {}
func (*BlockHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{3}
}
func (m *BlockHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHead.Merge(m, src)
}
func (m *BlockHead) XXX_Size() int {
	return m.Size()
}
func (m *BlockHead) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHead.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHead proto.InternalMessageInfo

func (m *BlockHead) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *BlockHead) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHead) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHead) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *BlockHead) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BlockHead) GetParentBlockHash() []byte {
	if m != nil {
		return m.ParentBlockHash
	}
	return nil
}

func (m *BlockHead) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *BlockHead) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *BlockHead) GetVRFProof() []byte {
	if m != nil {
		return m.VRFProof
	}
	return nil
}

func (m *BlockHead) GetVRFProofHeight() uint64 {
	if m != nil {
		return m.VRFProofHeight
	}
	return 0
}

func (m *BlockHead) GetMaxPri() []byte {
	if m != nil {
		return m.MaxPri
	}
	return nil
}

func (m *BlockHead) GetVoteAggSignature() []byte {
	if m != nil {
		return m.VoteAggSignature
	}
	return nil
}

func (m *BlockHead) GetChunkCount() uint32 {
	if m != nil {
		return m.ChunkCount
	}
	return 0
}

func (m *BlockHead) GetHeadChunks() [][]byte {
	if m != nil {
		return m.HeadChunks
	}
	return nil
}

func (m *BlockHead) GetStateRoot() []byte {
	if m != nil {
		return m.StateRoot
	}
	return nil
}

func (m *BlockHead) GetGasFees() []byte {
	if m != nil {
		return m.GasFees
	}
	return nil
}

func (m *BlockHead) GetTimeStamp() uint64 {
	if m != nil {
		return m.TimeStamp
	}
	return 0
}

func (m *BlockHead) GetElapsedSpan() uint64 {
	if m != nil {
		return m.ElapsedSpan
	}
	return 0
}

func (m *BlockHead) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockHead) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type BlockData struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	DataChunks           [][]byte `protobuf:"bytes,2,rep,name=DataChunks,proto3" json:"dataChunks"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockData) Reset()         { *m = BlockData{} }
func (m *BlockData) String() string { return proto.CompactTextString(m) }
func (*BlockData) ProtoMessage()    {}
func (*BlockData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{4}
}
func (m *BlockData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockData.Merge(m, src)
}
func (m *BlockData) XXX_Size() int {
	return m.Size()
}
func (m *BlockData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockData.DiscardUnknown(m)
}

var xxx_messageInfo_BlockData proto.InternalMessageInfo

func (m *BlockData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockData) GetDataChunks() [][]byte {
	if m != nil {
		return m.DataChunks
	}
	return nil
}

type Block struct {
	Head                 *BlockHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"head"`
	Data                 *BlockData `protobuf:"bytes,2,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{5}
}
func (m *Block) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return m.Size()
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetHead() *BlockHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *Block) GetData() *BlockData {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlockResultHeadChunk struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	TxResultHashRoot     []byte   `protobuf:"bytes,2,opt,name=TxResultHashRoot,proto3" json:"txResultHashRoot"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResultHeadChunk) Reset()         { *m = BlockResultHeadChunk{} }
func (m *BlockResultHeadChunk) String() string { return proto.CompactTextString(m) }
func (*BlockResultHeadChunk) ProtoMessage()    {}
func (*BlockResultHeadChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{6}
}
func (m *BlockResultHeadChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResultHeadChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockResultHeadChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResultHeadChunk.Merge(m, src)
}
func (m *BlockResultHeadChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlockResultHeadChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResultHeadChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResultHeadChunk proto.InternalMessageInfo

func (m *BlockResultHeadChunk) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockResultHeadChunk) GetTxResultHashRoot() []byte {
	if m != nil {
		return m.TxResultHashRoot
	}
	return nil
}

type BlockResultDataChunk struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	TxResults            [][]byte `protobuf:"bytes,2,rep,name=TxResults,proto3" json:"txResults"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResultDataChunk) Reset()         { *m = BlockResultDataChunk{} }
func (m *BlockResultDataChunk) String() string { return proto.CompactTextString(m) }
func (*BlockResultDataChunk) ProtoMessage()    {}
func (*BlockResultDataChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{7}
}
func (m *BlockResultDataChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResultDataChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockResultDataChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResultDataChunk.Merge(m, src)
}
func (m *BlockResultDataChunk) XXX_Size() int {
	return m.Size()
}
func (m *BlockResultDataChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResultDataChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResultDataChunk proto.InternalMessageInfo

func (m *BlockResultDataChunk) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockResultDataChunk) GetTxResults() [][]byte {
	if m != nil {
		return m.TxResults
	}
	return nil
}

type BlockResultHead struct {
	Version              uint32                       `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	PrevBlockResult      []byte                       `protobuf:"bytes,2,opt,name=PrevBlockResult,proto3" json:"prevBlockResult"`
	BlockHash            []byte                       `protobuf:"bytes,3,opt,name=BlockHash,proto3" json:"blockHash"`
	ResultHeadChunks [][]byte                     `protobuf:"bytes,4,rep,name=ResultHeadChunks,proto3" json:"resultHeadChunks"`
	Status           BlockResultHead_ResultStatus `protobuf:"varint,5,opt,name=Status,proto3,enum=proto.BlockResultHead_ResultStatus" json:"status"`
	ErrMsg           []byte                       `protobuf:"bytes,6,opt,name=ErrMsg,proto3" json:"errMsg"`
	Reserved             []byte                       `protobuf:"bytes,7,opt,name=Reserved,proto3" json:"reserved"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *BlockResultHead) Reset()         { *m = BlockResultHead{} }
func (m *BlockResultHead) String() string { return proto.CompactTextString(m) }
func (*BlockResultHead) ProtoMessage()    {}
func (*BlockResultHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{8}
}
func (m *BlockResultHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResultHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockResultHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResultHead.Merge(m, src)
}
func (m *BlockResultHead) XXX_Size() int {
	return m.Size()
}
func (m *BlockResultHead) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResultHead.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResultHead proto.InternalMessageInfo

func (m *BlockResultHead) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockResultHead) GetPrevBlockResult() []byte {
	if m != nil {
		return m.PrevBlockResult
	}
	return nil
}

func (m *BlockResultHead) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *BlockResultHead) GetResultHeadChunks() [][]byte {
	if m != nil {
		return m.ResultHeadChunks
	}
	return nil
}

func (m *BlockResultHead) GetStatus() BlockResultHead_ResultStatus {
	if m != nil {
		return m.Status
	}
	return BlockResultHead_OK
}

func (m *BlockResultHead) GetErrMsg() []byte {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *BlockResultHead) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

type BlockResultData struct {
	Version              uint32   `protobuf:"varint,1,opt,name=Version,proto3" json:"version"`
	ResultDataChunks     [][]byte `protobuf:"bytes,2,rep,name=ResultDataChunks,proto3" json:"resultDataChunks"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResultData) Reset()         { *m = BlockResultData{} }
func (m *BlockResultData) String() string { return proto.CompactTextString(m) }
func (*BlockResultData) ProtoMessage()    {}
func (*BlockResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{9}
}
func (m *BlockResultData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResultData.Merge(m, src)
}
func (m *BlockResultData) XXX_Size() int {
	return m.Size()
}
func (m *BlockResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResultData.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResultData proto.InternalMessageInfo

func (m *BlockResultData) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockResultData) GetResultDataChunks() [][]byte {
	if m != nil {
		return m.ResultDataChunks
	}
	return nil
}

type BlockResult struct {
	Head                 *BlockResultHead `protobuf:"bytes,1,opt,name=Head,proto3" json:"head"`
	Data                 *BlockResultData `protobuf:"bytes,2,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BlockResult) Reset()         { *m = BlockResult{} }
func (m *BlockResult) String() string { return proto.CompactTextString(m) }
func (*BlockResult) ProtoMessage()    {}
func (*BlockResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{10}
}
func (m *BlockResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResult.Merge(m, src)
}
func (m *BlockResult) XXX_Size() int {
	return m.Size()
}
func (m *BlockResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResult.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResult proto.InternalMessageInfo

func (m *BlockResult) GetHead() *BlockResultHead {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *BlockResult) GetData() *BlockResultData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PubSubMessageBlockInfo struct {
	Block                []byte   `protobuf:"bytes,1,opt,name=Block,proto3" json:"block"`
	BlockResult          []byte   `protobuf:"bytes,2,opt,name=BlockResult,proto3" json:"blockResult"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PubSubMessageBlockInfo) Reset()         { *m = PubSubMessageBlockInfo{} }
func (m *PubSubMessageBlockInfo) String() string { return proto.CompactTextString(m) }
func (*PubSubMessageBlockInfo) ProtoMessage()    {}
func (*PubSubMessageBlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{11}
}
func (m *PubSubMessageBlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubSubMessageBlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PubSubMessageBlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubSubMessageBlockInfo.Merge(m, src)
}
func (m *PubSubMessageBlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *PubSubMessageBlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PubSubMessageBlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PubSubMessageBlockInfo proto.InternalMessageInfo

func (m *PubSubMessageBlockInfo) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *PubSubMessageBlockInfo) GetBlockResult() []byte {
	if m != nil {
		return m.BlockResult
	}
	return nil
}

type ChainMessage struct {
	MsgType ChainMessage_Type `protobuf:"varint,1,opt,name=MsgType,proto3,enum=proto.ChainMessage_Type" json:"msgType"`
	Data    []byte            `protobuf:"bytes,2,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChainMessage) Reset()         { *m = ChainMessage{} }
func (m *ChainMessage) String() string { return proto.CompactTextString(m) }
func (*ChainMessage) ProtoMessage()    {}
func (*ChainMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e550b1f5926e92d, []int{12}
}
func (m *ChainMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChainMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainMessage.Merge(m, src)
}
func (m *ChainMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChainMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChainMessage proto.InternalMessageInfo

func (m *ChainMessage) GetMsgType() ChainMessage_Type {
	if m != nil {
		return m.MsgType
	}
	return ChainMessage_Unknown
}

func (m *ChainMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.BlockResultHead_ResultStatus", BlockResultHead_ResultStatus_name, BlockResultHead_ResultStatus_value)
	proto.RegisterEnum("proto.ChainMessage_Type", ChainMessage_Type_name, ChainMessage_Type_value)
	proto.RegisterType((*ConsensusProof)(nil), "proto.ConsensusProof")
	proto.RegisterType((*BlockHeadChunk)(nil), "proto.BlockHeadChunk")
	proto.RegisterType((*BlockDataChunk)(nil), "proto.BlockDataChunk")
	proto.RegisterType((*BlockHead)(nil), "proto.BlockHead")
	proto.RegisterType((*BlockData)(nil), "proto.BlockData")
	proto.RegisterType((*Block)(nil), "proto.Block")
	proto.RegisterType((*BlockResultHeadChunk)(nil), "proto.BlockResultHeadChunk")
	proto.RegisterType((*BlockResultDataChunk)(nil), "proto.BlockResultDataChunk")
	proto.RegisterType((*BlockResultHead)(nil), "proto.BlockResultHead")
	proto.RegisterType((*BlockResultData)(nil), "proto.BlockResultData")
	proto.RegisterType((*BlockResult)(nil), "proto.BlockResult")
	proto.RegisterType((*PubSubMessageBlockInfo)(nil), "proto.PubSubMessageBlockInfo")
	proto.RegisterType((*ChainMessage)(nil), "proto.ChainMessage")
}

func init() { proto.RegisterFile("block.proto", fileDescriptor_8e550b1f5926e92d) }

var fileDescriptor_8e550b1f5926e92d = []byte{
	// 1087 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0xad, 0xf3, 0xd9, 0xde, 0xa4, 0xa9, 0xf1, 0xab, 0x9e, 0xcc, 0x87, 0xea, 0xca, 0x08, 0xa9,
	0x02, 0x29, 0xd2, 0x2b, 0x5d, 0x21, 0x21, 0x1e, 0x69, 0xfb, 0x3e, 0x04, 0x15, 0xd5, 0x6d, 0xe8,
	0x82, 0x9d, 0xd3, 0x4c, 0x9d, 0xd0, 0xd4, 0x63, 0x79, 0xec, 0x92, 0xb2, 0xe1, 0x0f, 0xf0, 0x03,
	0x80, 0x05, 0xbf, 0x87, 0x25, 0x4b, 0x56, 0x16, 0x2a, 0x3b, 0xef, 0xf8, 0x07, 0x68, 0xee, 0x8c,
	0x3f, 0x92, 0x94, 0xa7, 0x97, 0xd5, 0xcb, 0x3b, 0xe7, 0xcc, 0xcc, 0x9d, 0x3b, 0xe7, 0x5c, 0x17,
	0x3a, 0xa3, 0x19, 0xbf, 0xba, 0xe9, 0x87, 0x11, 0x8f, 0xb9, 0xd5, 0xa4, 0x7f, 0xde, 0x03, 0x9f,
	0xfb, 0x5c, 0x41, 0xee, 0x6f, 0x06, 0xf4, 0x8e, 0x79, 0x20, 0x58, 0x20, 0x12, 0x71, 0x1e, 0x71,
	0x7e, 0x6d, 0x7d, 0x0e, 0x3b, 0xe7, 0x5e, 0xc4, 0x82, 0x78, 0x20, 0x97, 0xbe, 0xf2, 0xc4, 0xc4,
	0x36, 0xf6, 0x8d, 0x83, 0xee, 0xe0, 0x49, 0x96, 0x3a, 0x3b, 0xe1, 0x22, 0x85, 0xcb, 0x5a, 0xcb,
	0x85, 0xd6, 0x2b, 0x36, 0xf5, 0x27, 0xb1, 0x5d, 0xdb, 0x37, 0x0e, 0x1a, 0x03, 0xc8, 0x52, 0xa7,
	0x35, 0x21, 0x04, 0x35, 0x63, 0x7d, 0x04, 0xed, 0x2f, 0x7d, 0xff, 0x62, 0xea, 0x07, 0x76, 0x9d,
	0xb6, 0xee, 0x64, 0xa9, 0xd3, 0xf6, 0x14, 0x84, 0x39, 0xe7, 0xfe, 0x5c, 0x83, 0x9e, 0xda, 0x98,
	0x79, 0xe3, 0xe3, 0x49, 0x12, 0xdc, 0xc8, 0x95, 0x97, 0x2c, 0x12, 0x53, 0x1e, 0x50, 0x51, 0xdb,
	0x6a, 0xe5, 0x9d, 0x82, 0x30, 0xe7, 0xac, 0x03, 0xd8, 0x3c, 0xe1, 0xb7, 0xde, 0x34, 0x78, 0x7d,
	0x42, 0x65, 0x74, 0x07, 0xdd, 0x2c, 0x75, 0x36, 0xc7, 0x1a, 0xc3, 0x82, 0x95, 0xca, 0xaf, 0xbd,
	0x24, 0xb8, 0x9a, 0xb0, 0x48, 0xd7, 0x42, 0xca, 0x99, 0xc6, 0xb0, 0x60, 0xe5, 0xd1, 0xc3, 0xf9,
	0x31, 0x4f, 0x82, 0xd8, 0x6e, 0x94, 0x47, 0xc7, 0x0a, 0xc2, 0x9c, 0x93, 0xf7, 0x1f, 0xce, 0x91,
	0xf3, 0xd8, 0x6e, 0xd2, 0x76, 0x74, 0xff, 0x98, 0x10, 0xd4, 0x8c, 0x75, 0x04, 0xdd, 0xe1, 0x1c,
	0x99, 0x48, 0x66, 0x31, 0x29, 0x5b, 0xa4, 0x34, 0xb3, 0xd4, 0xe9, 0xc6, 0x15, 0x1c, 0x17, 0x54,
	0x2e, 0xea, 0x6e, 0x9c, 0x78, 0xb1, 0xb7, 0x56, 0x37, 0xde, 0x85, 0xfa, 0x70, 0x2e, 0xec, 0xda,
	0x7e, 0xfd, 0xa0, 0x3b, 0x68, 0x67, 0xa9, 0x53, 0x8f, 0xe7, 0x02, 0x25, 0xe6, 0xfe, 0xdb, 0x82,
	0xad, 0xa2, 0xc5, 0x72, 0xbf, 0xe3, 0x89, 0xea, 0x9a, 0x51, 0xbe, 0xcb, 0x95, 0x82, 0x30, 0xe7,
	0xaa, 0xc7, 0xd6, 0xde, 0x70, 0x6c, 0xe9, 0x84, 0xfa, 0xff, 0x3a, 0xc1, 0x81, 0xe6, 0x69, 0xc8,
	0xaf, 0x26, 0xd4, 0xd2, 0xc6, 0x60, 0x2b, 0x4b, 0x9d, 0x26, 0x93, 0x00, 0x2a, 0x5c, 0x0a, 0x90,
	0x27, 0xc1, 0x98, 0xba, 0xa9, 0x05, 0x91, 0x04, 0x50, 0xe1, 0x8f, 0xd9, 0xb5, 0xb5, 0x86, 0x5d,
	0x0f, 0x60, 0xf3, 0x3c, 0xe2, 0x21, 0x17, 0x2c, 0xb2, 0xdb, 0xe5, 0xfb, 0x87, 0x1a, 0xc3, 0x82,
	0x95, 0x95, 0x50, 0x40, 0xec, 0x4d, 0x92, 0x51, 0x25, 0xa1, 0x04, 0x50, 0xe1, 0x72, 0xab, 0x4b,
	0x7c, 0xa1, 0x34, 0x5b, 0xe5, 0x56, 0x77, 0xd1, 0x35, 0x61, 0x58, 0xb0, 0xd6, 0x67, 0xd0, 0xcb,
	0x7f, 0xeb, 0x0e, 0x01, 0xdd, 0xce, 0xca, 0x52, 0xa7, 0x97, 0xeb, 0x15, 0x83, 0x4b, 0x4a, 0xd9,
	0xd5, 0x33, 0x6f, 0x7e, 0x1e, 0x4d, 0xed, 0x4e, 0xe9, 0xaf, 0x5b, 0x42, 0x50, 0x33, 0xd6, 0x73,
	0x30, 0x2f, 0x79, 0xcc, 0x74, 0x8e, 0xbc, 0x38, 0x89, 0x98, 0xdd, 0x25, 0xf5, 0x6e, 0x96, 0x3a,
	0xe6, 0xdd, 0x12, 0x87, 0x2b, 0x6a, 0xab, 0x0f, 0x40, 0x16, 0x53, 0x7e, 0xdf, 0xa6, 0x57, 0xee,
	0x65, 0xa9, 0x03, 0x57, 0x05, 0x8a, 0x15, 0x85, 0xd4, 0x17, 0x21, 0x15, 0x76, 0x8f, 0x9c, 0x46,
	0xfa, 0x49, 0x81, 0x62, 0x45, 0x61, 0x7d, 0x02, 0x5b, 0x17, 0xb1, 0x17, 0x33, 0xb2, 0xff, 0x0e,
	0x95, 0xb6, 0x9d, 0xa5, 0xce, 0x96, 0xc8, 0x41, 0x2c, 0x79, 0xe9, 0xb7, 0x97, 0x9e, 0x78, 0xc1,
	0x98, 0xb0, 0xcd, 0xd2, 0x96, 0xbe, 0x82, 0x30, 0xe7, 0xe4, 0x9e, 0xc3, 0xe9, 0x2d, 0xbb, 0x88,
	0xbd, 0xdb, 0xd0, 0x7e, 0x87, 0x1a, 0x4a, 0x7b, 0xc6, 0x39, 0x88, 0x25, 0x6f, 0x3d, 0x83, 0xce,
	0xe9, 0xcc, 0x0b, 0x05, 0x1b, 0x5f, 0x84, 0x5e, 0x60, 0x5b, 0x24, 0xdf, 0xc9, 0x52, 0xa7, 0xc3,
	0x66, 0x9e, 0x08, 0x15, 0x8c, 0x55, 0x8d, 0xf5, 0x01, 0x34, 0xc8, 0x5e, 0x4f, 0xa8, 0x86, 0xcd,
	0x2c, 0x75, 0x1a, 0x13, 0xe9, 0xa9, 0x46, 0x6e, 0x24, 0x64, 0x82, 0x45, 0x77, 0x6c, 0x6c, 0xef,
	0x96, 0xaf, 0x1f, 0x69, 0x0c, 0x0b, 0xd6, 0x1d, 0xe9, 0xc8, 0xc9, 0x1c, 0xbf, 0x6d, 0x84, 0xfb,
	0x00, 0x45, 0xec, 0xf3, 0x24, 0x53, 0x7f, 0xc7, 0x05, 0x8a, 0x15, 0x85, 0xeb, 0x43, 0x93, 0xce,
	0xb0, 0xfa, 0xd0, 0x90, 0x6d, 0xa7, 0xcd, 0x3b, 0x87, 0xa6, 0x1a, 0xfb, 0xfd, 0x22, 0xf2, 0xfa,
	0x1a, 0xcc, 0x1b, 0x23, 0xe9, 0xa4, 0x5e, 0x6e, 0x43, 0xc1, 0x5e, 0xd2, 0x4b, 0x5c, 0xe9, 0xe5,
	0xa1, 0x48, 0x3a, 0xf7, 0x27, 0xd8, 0x25, 0x52, 0xcd, 0xa9, 0xb5, 0x07, 0xf5, 0x73, 0x30, 0xf3,
	0x19, 0x47, 0xf9, 0x94, 0x76, 0xa8, 0x95, 0x4e, 0x8d, 0x97, 0x38, 0x5c, 0x51, 0xbb, 0xdf, 0x2f,
	0x14, 0xb0, 0xf6, 0x6c, 0x94, 0xa6, 0xd1, 0x5b, 0xe6, 0x7d, 0x55, 0xa6, 0xc9, 0x41, 0x2c, 0x79,
	0xf7, 0xf7, 0x3a, 0xec, 0x2c, 0xdd, 0xf6, 0x6d, 0xcf, 0x91, 0x63, 0x2a, 0x62, 0x77, 0x95, 0xd5,
	0xfa, 0x9e, 0x6a, 0x4c, 0x2d, 0x52, 0xb8, 0xac, 0x95, 0x65, 0x96, 0xf3, 0xad, 0x5e, 0xe6, 0x65,
	0x54, 0x4c, 0xb6, 0x92, 0x97, 0x4d, 0x5d, 0x7a, 0x0e, 0x61, 0x37, 0xe8, 0x6a, 0xd4, 0xd4, 0x68,
	0x89, 0xc3, 0x15, 0xb5, 0xf5, 0x12, 0x5a, 0x32, 0x7e, 0x89, 0xa0, 0xb1, 0xdb, 0x3b, 0xfc, 0xb0,
	0xea, 0x83, 0x52, 0xdd, 0x57, 0x3f, 0x95, 0x54, 0x4d, 0x22, 0x41, 0xbf, 0x51, 0x2f, 0x97, 0xd3,
	0xea, 0x34, 0x8a, 0xce, 0x84, 0xaf, 0x87, 0x32, 0x69, 0x18, 0x21, 0xa8, 0x99, 0x85, 0xe4, 0xb4,
	0xdf, 0x98, 0x1c, 0x07, 0xba, 0xd5, 0x13, 0xad, 0x16, 0xd4, 0xbe, 0xf9, 0xca, 0xdc, 0xb0, 0xda,
	0x50, 0x3f, 0x8d, 0x22, 0xd3, 0x70, 0x7f, 0x5c, 0x78, 0x9f, 0x75, 0x02, 0x56, 0xf4, 0x6c, 0x25,
	0x66, 0x95, 0x9e, 0x95, 0x1c, 0xae, 0xa8, 0xdd, 0x7b, 0xe8, 0x54, 0x5f, 0xec, 0x68, 0x21, 0x78,
	0x4f, 0x1f, 0x6f, 0xe0, 0x4a, 0xfc, 0x8e, 0x16, 0xe2, 0xf7, 0xc8, 0xaa, 0x47, 0x43, 0x38, 0x83,
	0xa7, 0xe7, 0xc9, 0xe8, 0x22, 0x19, 0x9d, 0x31, 0x21, 0x3c, 0x9f, 0x91, 0xfe, 0x75, 0x70, 0xcd,
	0xe5, 0x47, 0x8b, 0xfe, 0xa3, 0xbf, 0xe7, 0xf4, 0xd1, 0x22, 0xcf, 0xa0, 0x9e, 0x0f, 0xcf, 0x16,
	0xaa, 0xd6, 0x9e, 0xa4, 0x39, 0x38, 0xaa, 0xf8, 0xb1, 0xaa, 0x71, 0x7f, 0x35, 0xa0, 0x4b, 0x7f,
	0x0a, 0xe8, 0xd3, 0xac, 0x2f, 0xa0, 0x7d, 0x26, 0xfc, 0xe1, 0x7d, 0xc8, 0xe8, 0x98, 0xde, 0xa1,
	0xad, 0xeb, 0xae, 0xaa, 0xfa, 0x92, 0x57, 0xcd, 0xbf, 0x55, 0x62, 0xcc, 0x57, 0xc9, 0xc9, 0x5a,
	0xdc, 0xba, 0xbb, 0x72, 0xbb, 0x8f, 0xa1, 0x41, 0xaa, 0x0e, 0xb4, 0xbf, 0x0d, 0x6e, 0x02, 0xfe,
	0x43, 0x60, 0x6e, 0xc8, 0xa7, 0x1f, 0xce, 0x4d, 0xc3, 0xda, 0xd6, 0xc1, 0x90, 0xb7, 0x35, 0x6b,
	0x83, 0xf7, 0xff, 0x78, 0xd8, 0x33, 0xfe, 0x7c, 0xd8, 0x33, 0xfe, 0x7a, 0xd8, 0x33, 0xfe, 0x7e,
	0xd8, 0x33, 0x7e, 0xf9, 0x67, 0x6f, 0xe3, 0xbb, 0x66, 0x7c, 0x1f, 0x32, 0x31, 0x6a, 0x51, 0x55,
	0x9f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x54, 0x1a, 0x21, 0x4e, 0x15, 0x0b, 0x00, 0x00,
}

func (m *ConsensusProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AggSign) > 0 {
		i -= len(m.AggSign)
		copy(dAtA[i:], m.AggSign)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.AggSign)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ParentBlockHash) > 0 {
		i -= len(m.ParentBlockHash)
		copy(dAtA[i:], m.ParentBlockHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ParentBlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeadChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeadChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeadChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResultRoot) > 0 {
		i -= len(m.TxResultRoot)
		copy(dAtA[i:], m.TxResultRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxResultRoot)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxRoot) > 0 {
		i -= len(m.TxRoot)
		copy(dAtA[i:], m.TxRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TxCount != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.TxCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Launcher) > 0 {
		i -= len(m.Launcher)
		copy(dAtA[i:], m.Launcher)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Launcher)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DomainID) > 0 {
		i -= len(m.DomainID)
		copy(dAtA[i:], m.DomainID)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.DomainID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockDataChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockDataChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockDataChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.ElapsedSpan != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ElapsedSpan))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.TimeStamp != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.TimeStamp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.GasFees) > 0 {
		i -= len(m.GasFees)
		copy(dAtA[i:], m.GasFees)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.GasFees)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.HeadChunks) > 0 {
		for iNdEx := len(m.HeadChunks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.HeadChunks[iNdEx])
			copy(dAtA[i:], m.HeadChunks[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.HeadChunks[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.ChunkCount != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.ChunkCount))
		i--
		dAtA[i] = 0x68
	}
	if len(m.VoteAggSignature) > 0 {
		i -= len(m.VoteAggSignature)
		copy(dAtA[i:], m.VoteAggSignature)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.VoteAggSignature)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.MaxPri) > 0 {
		i -= len(m.MaxPri)
		copy(dAtA[i:], m.MaxPri)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.MaxPri)))
		i--
		dAtA[i] = 0x5a
	}
	if m.VRFProofHeight != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.VRFProofHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.VRFProof) > 0 {
		i -= len(m.VRFProof)
		copy(dAtA[i:], m.VRFProof)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.VRFProof)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ParentBlockHash) > 0 {
		i -= len(m.ParentBlockHash)
		copy(dAtA[i:], m.ParentBlockHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ParentBlockHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Round != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Height != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataChunks) > 0 {
		for iNdEx := len(m.DataChunks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DataChunks[iNdEx])
			copy(dAtA[i:], m.DataChunks[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.DataChunks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Block) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockResultHeadChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResultHeadChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResultHeadChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResultHashRoot) > 0 {
		i -= len(m.TxResultHashRoot)
		copy(dAtA[i:], m.TxResultHashRoot)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.TxResultHashRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockResultDataChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResultDataChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResultDataChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResults) > 0 {
		for iNdEx := len(m.TxResults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxResults[iNdEx])
			copy(dAtA[i:], m.TxResults[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.TxResults[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockResultHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResultHead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResultHead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ErrMsg) > 0 {
		i -= len(m.ErrMsg)
		copy(dAtA[i:], m.ErrMsg)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.ErrMsg)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ResultHeadChunks) > 0 {
		for iNdEx := len(m.ResultHeadChunks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResultHeadChunks[iNdEx])
			copy(dAtA[i:], m.ResultHeadChunks[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.ResultHeadChunks[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PrevBlockResult) > 0 {
		i -= len(m.PrevBlockResult)
		copy(dAtA[i:], m.PrevBlockResult)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.PrevBlockResult)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockResultData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResultData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResultData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ResultDataChunks) > 0 {
		for iNdEx := len(m.ResultDataChunks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ResultDataChunks[iNdEx])
			copy(dAtA[i:], m.ResultDataChunks[iNdEx])
			i = encodeVarintBlock(dAtA, i, uint64(len(m.ResultDataChunks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Version != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BlockResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PubSubMessageBlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubSubMessageBlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubSubMessageBlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockResult) > 0 {
		i -= len(m.BlockResult)
		copy(dAtA[i:], m.BlockResult)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.BlockResult)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintBlock(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsensusProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ParentBlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	l = len(m.AggSign)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeadChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	l = len(m.DomainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Launcher)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.TxCount != 0 {
		n += 1 + sovBlock(uint64(m.TxCount))
	}
	l = len(m.TxRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.TxResultRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockDataChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if m.Height != 0 {
		n += 1 + sovBlock(uint64(m.Height))
	}
	if m.Epoch != 0 {
		n += 1 + sovBlock(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovBlock(uint64(m.Round))
	}
	l = len(m.ParentBlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.VRFProof)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.VRFProofHeight != 0 {
		n += 1 + sovBlock(uint64(m.VRFProofHeight))
	}
	l = len(m.MaxPri)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.VoteAggSignature)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.ChunkCount != 0 {
		n += 1 + sovBlock(uint64(m.ChunkCount))
	}
	if len(m.HeadChunks) > 0 {
		for _, b := range m.HeadChunks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.GasFees)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	if m.TimeStamp != 0 {
		n += 2 + sovBlock(uint64(m.TimeStamp))
	}
	if m.ElapsedSpan != 0 {
		n += 2 + sovBlock(uint64(m.ElapsedSpan))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 2 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if len(m.DataChunks) > 0 {
		for _, b := range m.DataChunks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Block) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResultHeadChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	l = len(m.TxResultHashRoot)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResultDataChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if len(m.TxResults) > 0 {
		for _, b := range m.TxResults {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResultHead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	l = len(m.PrevBlockResult)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.ResultHeadChunks) > 0 {
		for _, b := range m.ResultHeadChunks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovBlock(uint64(m.Status))
	}
	l = len(m.ErrMsg)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResultData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBlock(uint64(m.Version))
	}
	if len(m.ResultDataChunks) > 0 {
		for _, b := range m.ResultDataChunks {
			l = len(b)
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PubSubMessageBlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	l = len(m.BlockResult)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChainMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovBlock(uint64(m.MsgType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsensusProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockHash = append(m.ParentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockHash == nil {
				m.ParentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggSign = append(m.AggSign[:0], dAtA[iNdEx:postIndex]...)
			if m.AggSign == nil {
				m.AggSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeadChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeadChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeadChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainID = append(m.DomainID[:0], dAtA[iNdEx:postIndex]...)
			if m.DomainID == nil {
				m.DomainID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Launcher = append(m.Launcher[:0], dAtA[iNdEx:postIndex]...)
			if m.Launcher == nil {
				m.Launcher = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCount", wireType)
			}
			m.TxCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxRoot = append(m.TxRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxRoot == nil {
				m.TxRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultRoot = append(m.TxResultRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxResultRoot == nil {
				m.TxResultRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockDataChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockDataChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockDataChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockHash = append(m.ParentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockHash == nil {
				m.ParentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFProof = append(m.VRFProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VRFProof == nil {
				m.VRFProof = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProofHeight", wireType)
			}
			m.VRFProofHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VRFProofHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPri", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPri = append(m.MaxPri[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxPri == nil {
				m.MaxPri = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteAggSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoteAggSignature = append(m.VoteAggSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.VoteAggSignature == nil {
				m.VoteAggSignature = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkCount", wireType)
			}
			m.ChunkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadChunks = append(m.HeadChunks, make([]byte, postIndex-iNdEx))
			copy(m.HeadChunks[len(m.HeadChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = append(m.StateRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StateRoot == nil {
				m.StateRoot = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasFees = append(m.GasFees[:0], dAtA[iNdEx:postIndex]...)
			if m.GasFees == nil {
				m.GasFees = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			m.TimeStamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedSpan", wireType)
			}
			m.ElapsedSpan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElapsedSpan |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataChunks = append(m.DataChunks, make([]byte, postIndex-iNdEx))
			copy(m.DataChunks[len(m.DataChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &BlockHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BlockData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResultHeadChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResultHeadChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResultHeadChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultHashRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultHashRoot = append(m.TxResultHashRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxResultHashRoot == nil {
				m.TxResultHashRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResultDataChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResultDataChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResultDataChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResults", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResults = append(m.TxResults, make([]byte, postIndex-iNdEx))
			copy(m.TxResults[len(m.TxResults)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResultHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResultHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResultHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevBlockResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevBlockResult = append(m.PrevBlockResult[:0], dAtA[iNdEx:postIndex]...)
			if m.PrevBlockResult == nil {
				m.PrevBlockResult = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultHeadChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultHeadChunks = append(m.ResultHeadChunks, make([]byte, postIndex-iNdEx))
			copy(m.ResultHeadChunks[len(m.ResultHeadChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BlockResultHead_ResultStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrMsg = append(m.ErrMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.ErrMsg == nil {
				m.ErrMsg = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResultData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResultData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResultData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultDataChunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultDataChunks = append(m.ResultDataChunks, make([]byte, postIndex-iNdEx))
			copy(m.ResultDataChunks[len(m.ResultDataChunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &BlockResultHead{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &BlockResultData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubSubMessageBlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubSubMessageBlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubSubMessageBlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockResult", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockResult = append(m.BlockResult[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockResult == nil {
				m.BlockResult = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= ChainMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlock = fmt.Errorf("proto: unexpected end of group")
)
