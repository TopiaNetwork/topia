// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_txpool.proto

package transactionpool

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxPoolMessage_TxPoolMessageType int32

const (
	TxPoolMessage_Unknown TxPoolMessage_TxPoolMessageType = 0
	TxPoolMessage_Tx      TxPoolMessage_TxPoolMessageType = 1
)

var TxPoolMessage_TxPoolMessageType_name = map[int32]string{
	0: "Unknown",
	1: "Tx",
}

var TxPoolMessage_TxPoolMessageType_value = map[string]int32{
	"Unknown": 0,
	"Tx":      1,
}

func (x TxPoolMessage_TxPoolMessageType) String() string {
	return proto.EnumName(TxPoolMessage_TxPoolMessageType_name, int32(x))
}

func (TxPoolMessage_TxPoolMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9a7af56e6334bfec, []int{0, 0}
}

type TxPoolMessage struct {
	MsgType TxPoolMessage_TxPoolMessageType `protobuf:"varint,1,opt,name=MsgType,proto3,enum=proto.TxPoolMessage_TxPoolMessageType" json:"msgType"`
	Data    []byte                          `protobuf:"bytes,2,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TxPoolMessage) Reset()         { *m = TxPoolMessage{} }
func (m *TxPoolMessage) String() string { return proto.CompactTextString(m) }
func (*TxPoolMessage) ProtoMessage()    {}
func (*TxPoolMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a7af56e6334bfec, []int{0}
}
func (m *TxPoolMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxPoolMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxPoolMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxPoolMessage.Merge(m, src)
}
func (m *TxPoolMessage) XXX_Size() int {
	return m.Size()
}
func (m *TxPoolMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TxPoolMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TxPoolMessage proto.InternalMessageInfo

func (m *TxPoolMessage) GetMsgType() TxPoolMessage_TxPoolMessageType {
	if m != nil {
		return m.MsgType
	}
	return TxPoolMessage_Unknown
}

func (m *TxPoolMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TxMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxMessage) Reset()         { *m = TxMessage{} }
func (m *TxMessage) String() string { return proto.CompactTextString(m) }
func (*TxMessage) ProtoMessage()    {}
func (*TxMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a7af56e6334bfec, []int{1}
}
func (m *TxMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxMessage.Merge(m, src)
}
func (m *TxMessage) XXX_Size() int {
	return m.Size()
}
func (m *TxMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TxMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TxMessage proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("proto.TxPoolMessage_TxPoolMessageType", TxPoolMessage_TxPoolMessageType_name, TxPoolMessage_TxPoolMessageType_value)
	proto.RegisterType((*TxPoolMessage)(nil), "proto.TxPoolMessage")
	proto.RegisterType((*TxMessage)(nil), "proto.TxMessage")
}

func init() { proto.RegisterFile("message_txpool.proto", fileDescriptor_9a7af56e6334bfec) }

var fileDescriptor_9a7af56e6334bfec = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0x8d, 0x2f, 0xa9, 0x28, 0xc8, 0xcf, 0xcf, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x05, 0x53, 0x52, 0x5c, 0xe9, 0xf9, 0xe9, 0xf9, 0x10, 0x21, 0xa5, 0x65, 0x8c, 0x5c,
	0xbc, 0x21, 0x15, 0x01, 0xf9, 0xf9, 0x39, 0xbe, 0x10, 0x1d, 0x42, 0xbe, 0x5c, 0xec, 0xbe, 0xc5,
	0xe9, 0x21, 0x95, 0x05, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x6a, 0x10, 0xa5, 0x7a,
	0x28, 0xca, 0x50, 0x79, 0x20, 0xd5, 0x4e, 0xdc, 0xaf, 0xee, 0xc9, 0xb3, 0xe7, 0x42, 0xb4, 0x06,
	0xc1, 0xcc, 0x10, 0x92, 0xe1, 0x62, 0x71, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x71, 0xe2, 0x78, 0x75, 0x4f, 0x9e, 0x25, 0x25, 0xb1, 0x24, 0x31, 0x08, 0x2c, 0xaa, 0xa4, 0xc1,
	0x25, 0x88, 0x61, 0x90, 0x10, 0x37, 0x17, 0x7b, 0x68, 0x5e, 0x76, 0x5e, 0x7e, 0x79, 0x9e, 0x00,
	0x83, 0x10, 0x1b, 0x17, 0x53, 0x48, 0x85, 0x00, 0xa3, 0x12, 0x37, 0x17, 0x67, 0x48, 0x05, 0x54,
	0x95, 0x93, 0xea, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0xde, 0x78, 0x24, 0xc7, 0xf8,
	0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0xfc, 0x25, 0x45, 0x89, 0x79, 0xc5, 0x89,
	0xc9, 0x25, 0x99, 0xf9, 0x79, 0x20, 0x5f, 0x27, 0xb1, 0x81, 0x1d, 0x6e, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0x59, 0xa9, 0x3e, 0x0e, 0x01, 0x00, 0x00,
}

func (m *TxPoolMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxPoolMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxPoolMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessageTxpool(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintMessageTxpool(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageTxpool(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageTxpool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxPoolMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovMessageTxpool(uint64(m.MsgType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessageTxpool(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageTxpool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageTxpool(x uint64) (n int) {
	return sovMessageTxpool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxPoolMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageTxpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxPoolMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxPoolMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageTxpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= TxPoolMessage_TxPoolMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageTxpool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageTxpool
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageTxpool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageTxpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageTxpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageTxpool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessageTxpool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageTxpool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageTxpool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageTxpool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageTxpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageTxpool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageTxpool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageTxpool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageTxpool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageTxpool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageTxpool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageTxpool = fmt.Errorf("proto: unexpected end of group")
)
