// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_cons.proto

package consensus

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsensusMessage_Type int32

const (
	ConsensusMessage_Unknown          ConsensusMessage_Type = 0
	ConsensusMessage_CSDomainSel      ConsensusMessage_Type = 1
	ConsensusMessage_PrepareExe       ConsensusMessage_Type = 2
	ConsensusMessage_PrepareExeIndic  ConsensusMessage_Type = 3
	ConsensusMessage_PrepareProp      ConsensusMessage_Type = 4
	ConsensusMessage_Propose          ConsensusMessage_Type = 5
	ConsensusMessage_ExeRSValidateReq ConsensusMessage_Type = 6
	ConsensusMessage_BestPropose      ConsensusMessage_Type = 7
	ConsensusMessage_Vote             ConsensusMessage_Type = 8
	ConsensusMessage_Commit           ConsensusMessage_Type = 9
	ConsensusMessage_PartPubKey       ConsensusMessage_Type = 10
	ConsensusMessage_DKGDeal          ConsensusMessage_Type = 11
	ConsensusMessage_DKGDealResp      ConsensusMessage_Type = 12
	ConsensusMessage_DKGFinished      ConsensusMessage_Type = 13
)

var ConsensusMessage_Type_name = map[int32]string{
	0:  "Unknown",
	1:  "CSDomainSel",
	2:  "PrepareExe",
	3:  "PrepareExeIndic",
	4:  "PrepareProp",
	5:  "Propose",
	6:  "ExeRSValidateReq",
	7:  "BestPropose",
	8:  "Vote",
	9:  "Commit",
	10: "PartPubKey",
	11: "DKGDeal",
	12: "DKGDealResp",
	13: "DKGFinished",
}

var ConsensusMessage_Type_value = map[string]int32{
	"Unknown":          0,
	"CSDomainSel":      1,
	"PrepareExe":       2,
	"PrepareExeIndic":  3,
	"PrepareProp":      4,
	"Propose":          5,
	"ExeRSValidateReq": 6,
	"BestPropose":      7,
	"Vote":             8,
	"Commit":           9,
	"PartPubKey":       10,
	"DKGDeal":          11,
	"DKGDealResp":      12,
	"DKGFinished":      13,
}

func (x ConsensusMessage_Type) String() string {
	return proto.EnumName(ConsensusMessage_Type_name, int32(x))
}

func (ConsensusMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{0, 0}
}

type ConsensusMessage struct {
	MsgType ConsensusMessage_Type `protobuf:"varint,1,opt,name=MsgType,proto3,enum=proto.ConsensusMessage_Type" json:"msgType"`
	Data    []byte                `protobuf:"bytes,2,opt,name=Data,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConsensusMessage) Reset()         { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()    {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{0}
}
func (m *ConsensusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMessage.Merge(m, src)
}
func (m *ConsensusMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMessage proto.InternalMessageInfo

func (m *ConsensusMessage) GetMsgType() ConsensusMessage_Type {
	if m != nil {
		return m.MsgType
	}
	return ConsensusMessage_Unknown
}

func (m *ConsensusMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PreparePackedMessageExe struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	ParentBlockHash      []byte   `protobuf:"bytes,7,opt,name=ParentBlockHash,proto3" json:"parentBlockHash"`
	VRFProof             []byte   `protobuf:"bytes,8,opt,name=VRFProof,proto3" json:"vrfProof"`
	VRFProofPubKey       []byte   `protobuf:"bytes,9,opt,name=VRFProofPubKey,proto3" json:"vrfProof"`
	Launcher             []byte   `protobuf:"bytes,10,opt,name=Launcher,proto3" json:"vrfProof"`
	StateVersion         uint64   `protobuf:"varint,11,opt,name=StateVersion,proto3" json:"stateVersion"`
	TxRoot               []byte   `protobuf:"bytes,12,opt,name=TxRoot,proto3" json:"txRoot"`
	Txs                  [][]byte `protobuf:"bytes,13,rep,name=Txs,proto3" json:"txs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparePackedMessageExe) Reset()         { *m = PreparePackedMessageExe{} }
func (m *PreparePackedMessageExe) String() string { return proto.CompactTextString(m) }
func (*PreparePackedMessageExe) ProtoMessage()    {}
func (*PreparePackedMessageExe) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{1}
}
func (m *PreparePackedMessageExe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreparePackedMessageExe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PreparePackedMessageExe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparePackedMessageExe.Merge(m, src)
}
func (m *PreparePackedMessageExe) XXX_Size() int {
	return m.Size()
}
func (m *PreparePackedMessageExe) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparePackedMessageExe.DiscardUnknown(m)
}

var xxx_messageInfo_PreparePackedMessageExe proto.InternalMessageInfo

func (m *PreparePackedMessageExe) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *PreparePackedMessageExe) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PreparePackedMessageExe) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PreparePackedMessageExe) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PreparePackedMessageExe) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PreparePackedMessageExe) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PreparePackedMessageExe) GetParentBlockHash() []byte {
	if m != nil {
		return m.ParentBlockHash
	}
	return nil
}

func (m *PreparePackedMessageExe) GetVRFProof() []byte {
	if m != nil {
		return m.VRFProof
	}
	return nil
}

func (m *PreparePackedMessageExe) GetVRFProofPubKey() []byte {
	if m != nil {
		return m.VRFProofPubKey
	}
	return nil
}

func (m *PreparePackedMessageExe) GetLauncher() []byte {
	if m != nil {
		return m.Launcher
	}
	return nil
}

func (m *PreparePackedMessageExe) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *PreparePackedMessageExe) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *PreparePackedMessageExe) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type PreparePackedMessageExeIndication struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,7,opt,name=StateVersion,proto3" json:"stateVersion"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparePackedMessageExeIndication) Reset()         { *m = PreparePackedMessageExeIndication{} }
func (m *PreparePackedMessageExeIndication) String() string { return proto.CompactTextString(m) }
func (*PreparePackedMessageExeIndication) ProtoMessage()    {}
func (*PreparePackedMessageExeIndication) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{2}
}
func (m *PreparePackedMessageExeIndication) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreparePackedMessageExeIndication) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PreparePackedMessageExeIndication) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparePackedMessageExeIndication.Merge(m, src)
}
func (m *PreparePackedMessageExeIndication) XXX_Size() int {
	return m.Size()
}
func (m *PreparePackedMessageExeIndication) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparePackedMessageExeIndication.DiscardUnknown(m)
}

var xxx_messageInfo_PreparePackedMessageExeIndication proto.InternalMessageInfo

func (m *PreparePackedMessageExeIndication) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *PreparePackedMessageExeIndication) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PreparePackedMessageExeIndication) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PreparePackedMessageExeIndication) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PreparePackedMessageExeIndication) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PreparePackedMessageExeIndication) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PreparePackedMessageExeIndication) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

type PreparePackedMessageProp struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	ParentBlockHash      []byte   `protobuf:"bytes,7,opt,name=ParentBlockHash,proto3" json:"parentBlockHash"`
	VRFProof             []byte   `protobuf:"bytes,8,opt,name=VRFProof,proto3" json:"vrfProof"`
	VRFProofPubKey       []byte   `protobuf:"bytes,9,opt,name=VRFProofPubKey,proto3" json:"vrfProofPubKey"`
	Launcher             []byte   `protobuf:"bytes,10,opt,name=Launcher,proto3" json:"launcher"`
	StateVersion         uint64   `protobuf:"varint,11,opt,name=StateVersion,proto3" json:"stateVersion"`
	TxRoot               []byte   `protobuf:"bytes,12,opt,name=TxRoot,proto3" json:"txRoot"`
	TxResultRoot         []byte   `protobuf:"bytes,13,opt,name=TxResultRoot,proto3" json:"txResultRoot"`
	TxHashs              [][]byte `protobuf:"bytes,14,rep,name=TxHashs,proto3" json:"txHashs"`
	TxResultHashs        [][]byte `protobuf:"bytes,15,rep,name=TxResultHashs,proto3" json:"txResultHashs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreparePackedMessageProp) Reset()         { *m = PreparePackedMessageProp{} }
func (m *PreparePackedMessageProp) String() string { return proto.CompactTextString(m) }
func (*PreparePackedMessageProp) ProtoMessage()    {}
func (*PreparePackedMessageProp) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{3}
}
func (m *PreparePackedMessageProp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreparePackedMessageProp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PreparePackedMessageProp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreparePackedMessageProp.Merge(m, src)
}
func (m *PreparePackedMessageProp) XXX_Size() int {
	return m.Size()
}
func (m *PreparePackedMessageProp) XXX_DiscardUnknown() {
	xxx_messageInfo_PreparePackedMessageProp.DiscardUnknown(m)
}

var xxx_messageInfo_PreparePackedMessageProp proto.InternalMessageInfo

func (m *PreparePackedMessageProp) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *PreparePackedMessageProp) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PreparePackedMessageProp) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *PreparePackedMessageProp) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PreparePackedMessageProp) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PreparePackedMessageProp) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *PreparePackedMessageProp) GetParentBlockHash() []byte {
	if m != nil {
		return m.ParentBlockHash
	}
	return nil
}

func (m *PreparePackedMessageProp) GetVRFProof() []byte {
	if m != nil {
		return m.VRFProof
	}
	return nil
}

func (m *PreparePackedMessageProp) GetVRFProofPubKey() []byte {
	if m != nil {
		return m.VRFProofPubKey
	}
	return nil
}

func (m *PreparePackedMessageProp) GetLauncher() []byte {
	if m != nil {
		return m.Launcher
	}
	return nil
}

func (m *PreparePackedMessageProp) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *PreparePackedMessageProp) GetTxRoot() []byte {
	if m != nil {
		return m.TxRoot
	}
	return nil
}

func (m *PreparePackedMessageProp) GetTxResultRoot() []byte {
	if m != nil {
		return m.TxResultRoot
	}
	return nil
}

func (m *PreparePackedMessageProp) GetTxHashs() [][]byte {
	if m != nil {
		return m.TxHashs
	}
	return nil
}

func (m *PreparePackedMessageProp) GetTxResultHashs() [][]byte {
	if m != nil {
		return m.TxResultHashs
	}
	return nil
}

type ProposeMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,7,opt,name=StateVersion,proto3" json:"stateVersion"`
	MaxPri               []byte   `protobuf:"bytes,8,opt,name=MaxPri,proto3" json:"maxPri"`
	Proposer             []byte   `protobuf:"bytes,9,opt,name=Proposer,proto3" json:"proposer"`
	TxHashs              [][]byte `protobuf:"bytes,10,rep,name=TxHashs,proto3" json:"txHashs"`
	TxResultHashs        [][]byte `protobuf:"bytes,11,rep,name=TxResultHashs,proto3" json:"txResultHashs"`
	BlockHead            []byte   `protobuf:"bytes,12,opt,name=BlockHead,proto3" json:"blockHead"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProposeMessage) Reset()         { *m = ProposeMessage{} }
func (m *ProposeMessage) String() string { return proto.CompactTextString(m) }
func (*ProposeMessage) ProtoMessage()    {}
func (*ProposeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{4}
}
func (m *ProposeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ProposeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeMessage.Merge(m, src)
}
func (m *ProposeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeMessage proto.InternalMessageInfo

func (m *ProposeMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *ProposeMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ProposeMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ProposeMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ProposeMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ProposeMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ProposeMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *ProposeMessage) GetMaxPri() []byte {
	if m != nil {
		return m.MaxPri
	}
	return nil
}

func (m *ProposeMessage) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *ProposeMessage) GetTxHashs() [][]byte {
	if m != nil {
		return m.TxHashs
	}
	return nil
}

func (m *ProposeMessage) GetTxResultHashs() [][]byte {
	if m != nil {
		return m.TxResultHashs
	}
	return nil
}

func (m *ProposeMessage) GetBlockHead() []byte {
	if m != nil {
		return m.BlockHead
	}
	return nil
}

type ExeResultValidateReqMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Validator            []byte   `protobuf:"bytes,5,opt,name=Validator,proto3" json:"proposer"`
	Signature            []byte   `protobuf:"bytes,6,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,7,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,8,opt,name=StateVersion,proto3" json:"stateVersion"`
	TxHashs              [][]byte `protobuf:"bytes,9,rep,name=TxHashs,proto3" json:"txHashs"`
	TxResultHashs        [][]byte `protobuf:"bytes,10,rep,name=TxResultHashs,proto3" json:"txResultHashs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExeResultValidateReqMessage) Reset()         { *m = ExeResultValidateReqMessage{} }
func (m *ExeResultValidateReqMessage) String() string { return proto.CompactTextString(m) }
func (*ExeResultValidateReqMessage) ProtoMessage()    {}
func (*ExeResultValidateReqMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{5}
}
func (m *ExeResultValidateReqMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExeResultValidateReqMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExeResultValidateReqMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExeResultValidateReqMessage.Merge(m, src)
}
func (m *ExeResultValidateReqMessage) XXX_Size() int {
	return m.Size()
}
func (m *ExeResultValidateReqMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExeResultValidateReqMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExeResultValidateReqMessage proto.InternalMessageInfo

func (m *ExeResultValidateReqMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *ExeResultValidateReqMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ExeResultValidateReqMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ExeResultValidateReqMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ExeResultValidateReqMessage) GetValidator() []byte {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *ExeResultValidateReqMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ExeResultValidateReqMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ExeResultValidateReqMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *ExeResultValidateReqMessage) GetTxHashs() [][]byte {
	if m != nil {
		return m.TxHashs
	}
	return nil
}

func (m *ExeResultValidateReqMessage) GetTxResultHashs() [][]byte {
	if m != nil {
		return m.TxResultHashs
	}
	return nil
}

type BestProposeMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,7,opt,name=StateVersion,proto3" json:"stateVersion"`
	MaxPri               []byte   `protobuf:"bytes,8,opt,name=MaxPri,proto3" json:"maxPri"`
	Proposer             []byte   `protobuf:"bytes,9,opt,name=Proposer,proto3" json:"proposer"`
	PropMsgData          []byte   `protobuf:"bytes,10,opt,name=PropMsgData,proto3" json:"proposer"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BestProposeMessage) Reset()         { *m = BestProposeMessage{} }
func (m *BestProposeMessage) String() string { return proto.CompactTextString(m) }
func (*BestProposeMessage) ProtoMessage()    {}
func (*BestProposeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{6}
}
func (m *BestProposeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BestProposeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BestProposeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BestProposeMessage.Merge(m, src)
}
func (m *BestProposeMessage) XXX_Size() int {
	return m.Size()
}
func (m *BestProposeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BestProposeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BestProposeMessage proto.InternalMessageInfo

func (m *BestProposeMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *BestProposeMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BestProposeMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *BestProposeMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BestProposeMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *BestProposeMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *BestProposeMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *BestProposeMessage) GetMaxPri() []byte {
	if m != nil {
		return m.MaxPri
	}
	return nil
}

func (m *BestProposeMessage) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *BestProposeMessage) GetPropMsgData() []byte {
	if m != nil {
		return m.PropMsgData
	}
	return nil
}

type ExeResultValidateRespMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Executor             []byte   `protobuf:"bytes,5,opt,name=Executor,proto3" json:"executor"`
	Signature            []byte   `protobuf:"bytes,6,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,7,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,8,opt,name=StateVersion,proto3" json:"stateVersion"`
	TxProofs             [][]byte `protobuf:"bytes,9,rep,name=TxProofs,proto3" json:"txProofs"`
	TxResultProofs       [][]byte `protobuf:"bytes,10,rep,name=TxResultProofs,proto3" json:"txResultProofs"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExeResultValidateRespMessage) Reset()         { *m = ExeResultValidateRespMessage{} }
func (m *ExeResultValidateRespMessage) String() string { return proto.CompactTextString(m) }
func (*ExeResultValidateRespMessage) ProtoMessage()    {}
func (*ExeResultValidateRespMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{7}
}
func (m *ExeResultValidateRespMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExeResultValidateRespMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExeResultValidateRespMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExeResultValidateRespMessage.Merge(m, src)
}
func (m *ExeResultValidateRespMessage) XXX_Size() int {
	return m.Size()
}
func (m *ExeResultValidateRespMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExeResultValidateRespMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExeResultValidateRespMessage proto.InternalMessageInfo

func (m *ExeResultValidateRespMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *ExeResultValidateRespMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ExeResultValidateRespMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ExeResultValidateRespMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *ExeResultValidateRespMessage) GetExecutor() []byte {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *ExeResultValidateRespMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ExeResultValidateRespMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ExeResultValidateRespMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *ExeResultValidateRespMessage) GetTxProofs() [][]byte {
	if m != nil {
		return m.TxProofs
	}
	return nil
}

func (m *ExeResultValidateRespMessage) GetTxResultProofs() [][]byte {
	if m != nil {
		return m.TxResultProofs
	}
	return nil
}

type VoteMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	Voter                []byte   `protobuf:"bytes,6,opt,name=Voter,proto3" json:"voter"`
	PubKey               []byte   `protobuf:"bytes,7,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,8,opt,name=StateVersion,proto3" json:"stateVersion"`
	BlockHead            []byte   `protobuf:"bytes,9,opt,name=BlockHead,proto3" json:"blockHead"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteMessage) Reset()         { *m = VoteMessage{} }
func (m *VoteMessage) String() string { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()    {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{8}
}
func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *VoteMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VoteMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *VoteMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *VoteMessage) GetVoter() []byte {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *VoteMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *VoteMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *VoteMessage) GetBlockHead() []byte {
	if m != nil {
		return m.BlockHead
	}
	return nil
}

type CommitMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Epoch                uint64   `protobuf:"varint,3,opt,name=Epoch,proto3" json:"epoch"`
	Round                uint64   `protobuf:"varint,4,opt,name=Round,proto3" json:"epoch"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pubKey"`
	StateVersion         uint64   `protobuf:"varint,7,opt,name=StateVersion,proto3" json:"stateVersion"`
	BlockHead            []byte   `protobuf:"bytes,8,opt,name=BlockHead,proto3" json:"blockHead"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitMessage) Reset()         { *m = CommitMessage{} }
func (m *CommitMessage) String() string { return proto.CompactTextString(m) }
func (*CommitMessage) ProtoMessage()    {}
func (*CommitMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{9}
}
func (m *CommitMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommitMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CommitMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitMessage.Merge(m, src)
}
func (m *CommitMessage) XXX_Size() int {
	return m.Size()
}
func (m *CommitMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CommitMessage proto.InternalMessageInfo

func (m *CommitMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *CommitMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CommitMessage) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *CommitMessage) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *CommitMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommitMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *CommitMessage) GetStateVersion() uint64 {
	if m != nil {
		return m.StateVersion
	}
	return 0
}

func (m *CommitMessage) GetBlockHead() []byte {
	if m != nil {
		return m.BlockHead
	}
	return nil
}

type DKGPartPubKeyMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	TriggerNumber        uint64   `protobuf:"varint,3,opt,name=TriggerNumber,proto3" json:"triggerNumber"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,5,opt,name=PubKey,proto3" json:"pubKey"`
	PartPubKey           []byte   `protobuf:"bytes,6,opt,name=PartPubKey,proto3" json:"partPubKey"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DKGPartPubKeyMessage) Reset()         { *m = DKGPartPubKeyMessage{} }
func (m *DKGPartPubKeyMessage) String() string { return proto.CompactTextString(m) }
func (*DKGPartPubKeyMessage) ProtoMessage()    {}
func (*DKGPartPubKeyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{10}
}
func (m *DKGPartPubKeyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGPartPubKeyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DKGPartPubKeyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGPartPubKeyMessage.Merge(m, src)
}
func (m *DKGPartPubKeyMessage) XXX_Size() int {
	return m.Size()
}
func (m *DKGPartPubKeyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGPartPubKeyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DKGPartPubKeyMessage proto.InternalMessageInfo

func (m *DKGPartPubKeyMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *DKGPartPubKeyMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DKGPartPubKeyMessage) GetTriggerNumber() uint64 {
	if m != nil {
		return m.TriggerNumber
	}
	return 0
}

func (m *DKGPartPubKeyMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DKGPartPubKeyMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DKGPartPubKeyMessage) GetPartPubKey() []byte {
	if m != nil {
		return m.PartPubKey
	}
	return nil
}

type DKGDealMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	TriggerNumber        uint64   `protobuf:"varint,3,opt,name=TriggerNumber,proto3" json:"triggerNumber"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,5,opt,name=PubKey,proto3" json:"pubKey"`
	DealData             []byte   `protobuf:"bytes,6,opt,name=DealData,proto3" json:"dealData"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DKGDealMessage) Reset()         { *m = DKGDealMessage{} }
func (m *DKGDealMessage) String() string { return proto.CompactTextString(m) }
func (*DKGDealMessage) ProtoMessage()    {}
func (*DKGDealMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{11}
}
func (m *DKGDealMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGDealMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DKGDealMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGDealMessage.Merge(m, src)
}
func (m *DKGDealMessage) XXX_Size() int {
	return m.Size()
}
func (m *DKGDealMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGDealMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DKGDealMessage proto.InternalMessageInfo

func (m *DKGDealMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *DKGDealMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DKGDealMessage) GetTriggerNumber() uint64 {
	if m != nil {
		return m.TriggerNumber
	}
	return 0
}

func (m *DKGDealMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DKGDealMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DKGDealMessage) GetDealData() []byte {
	if m != nil {
		return m.DealData
	}
	return nil
}

type DKGDealRespMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	TriggerNumber        uint64   `protobuf:"varint,3,opt,name=TriggerNumber,proto3" json:"triggerNumber"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,5,opt,name=PubKey,proto3" json:"pubKey"`
	RespData             []byte   `protobuf:"bytes,6,opt,name=RespData,proto3" json:"respData"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DKGDealRespMessage) Reset()         { *m = DKGDealRespMessage{} }
func (m *DKGDealRespMessage) String() string { return proto.CompactTextString(m) }
func (*DKGDealRespMessage) ProtoMessage()    {}
func (*DKGDealRespMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{12}
}
func (m *DKGDealRespMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGDealRespMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DKGDealRespMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGDealRespMessage.Merge(m, src)
}
func (m *DKGDealRespMessage) XXX_Size() int {
	return m.Size()
}
func (m *DKGDealRespMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGDealRespMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DKGDealRespMessage proto.InternalMessageInfo

func (m *DKGDealRespMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *DKGDealRespMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DKGDealRespMessage) GetTriggerNumber() uint64 {
	if m != nil {
		return m.TriggerNumber
	}
	return 0
}

func (m *DKGDealRespMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DKGDealRespMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DKGDealRespMessage) GetRespData() []byte {
	if m != nil {
		return m.RespData
	}
	return nil
}

type DKGFinishedMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	TriggerNumber        uint64   `protobuf:"varint,3,opt,name=TriggerNumber,proto3" json:"triggerNumber"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,5,opt,name=PubKey,proto3" json:"pubKey"`
	NodeID               []byte   `protobuf:"bytes,6,opt,name=NodeID,proto3" json:"nodeID"`
	PubPolyCommit        []byte   `protobuf:"bytes,7,opt,name=PubPolyCommit,proto3" json:"respData"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DKGFinishedMessage) Reset()         { *m = DKGFinishedMessage{} }
func (m *DKGFinishedMessage) String() string { return proto.CompactTextString(m) }
func (*DKGFinishedMessage) ProtoMessage()    {}
func (*DKGFinishedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{13}
}
func (m *DKGFinishedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DKGFinishedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DKGFinishedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGFinishedMessage.Merge(m, src)
}
func (m *DKGFinishedMessage) XXX_Size() int {
	return m.Size()
}
func (m *DKGFinishedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGFinishedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DKGFinishedMessage proto.InternalMessageInfo

func (m *DKGFinishedMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *DKGFinishedMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DKGFinishedMessage) GetTriggerNumber() uint64 {
	if m != nil {
		return m.TriggerNumber
	}
	return 0
}

func (m *DKGFinishedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DKGFinishedMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *DKGFinishedMessage) GetNodeID() []byte {
	if m != nil {
		return m.NodeID
	}
	return nil
}

func (m *DKGFinishedMessage) GetPubPolyCommit() []byte {
	if m != nil {
		return m.PubPolyCommit
	}
	return nil
}

type ConsensusDomainSelectedMessage struct {
	ChainID              []byte   `protobuf:"bytes,1,opt,name=ChainID,proto3" json:"chainID"`
	Version              uint32   `protobuf:"varint,2,opt,name=Version,proto3" json:"version"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=Signature,proto3" json:"signature"`
	PubKey               []byte   `protobuf:"bytes,4,opt,name=PubKey,proto3" json:"pubKey"`
	DomainID             []byte   `protobuf:"bytes,5,opt,name=DomainID,proto3" json:"domainID"`
	MemberNumber         uint32   `protobuf:"varint,6,opt,name=MemberNumber,proto3" json:"memberNumber"`
	NodeIDOfMember       []byte   `protobuf:"bytes,7,opt,name=NodeIDOfMember,proto3" json:"nodeIDOfMember"`
	NodeRoleOfMember     uint64   `protobuf:"varint,8,opt,name=NodeRoleOfMember,proto3" json:"nodeRoleOfMember"`
	NodeWeightOfMember   uint64   `protobuf:"varint,9,opt,name=NodeWeightOfMember,proto3" json:"nodeWeightOfMember"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsensusDomainSelectedMessage) Reset()         { *m = ConsensusDomainSelectedMessage{} }
func (m *ConsensusDomainSelectedMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusDomainSelectedMessage) ProtoMessage()    {}
func (*ConsensusDomainSelectedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1eb6dc904811c3, []int{14}
}
func (m *ConsensusDomainSelectedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusDomainSelectedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ConsensusDomainSelectedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusDomainSelectedMessage.Merge(m, src)
}
func (m *ConsensusDomainSelectedMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusDomainSelectedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusDomainSelectedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusDomainSelectedMessage proto.InternalMessageInfo

func (m *ConsensusDomainSelectedMessage) GetChainID() []byte {
	if m != nil {
		return m.ChainID
	}
	return nil
}

func (m *ConsensusDomainSelectedMessage) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ConsensusDomainSelectedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ConsensusDomainSelectedMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ConsensusDomainSelectedMessage) GetDomainID() []byte {
	if m != nil {
		return m.DomainID
	}
	return nil
}

func (m *ConsensusDomainSelectedMessage) GetMemberNumber() uint32 {
	if m != nil {
		return m.MemberNumber
	}
	return 0
}

func (m *ConsensusDomainSelectedMessage) GetNodeIDOfMember() []byte {
	if m != nil {
		return m.NodeIDOfMember
	}
	return nil
}

func (m *ConsensusDomainSelectedMessage) GetNodeRoleOfMember() uint64 {
	if m != nil {
		return m.NodeRoleOfMember
	}
	return 0
}

func (m *ConsensusDomainSelectedMessage) GetNodeWeightOfMember() uint64 {
	if m != nil {
		return m.NodeWeightOfMember
	}
	return 0
}

func init() {
	proto.RegisterEnum("proto.ConsensusMessage_Type", ConsensusMessage_Type_name, ConsensusMessage_Type_value)
	proto.RegisterType((*ConsensusMessage)(nil), "proto.ConsensusMessage")
	proto.RegisterType((*PreparePackedMessageExe)(nil), "proto.PreparePackedMessageExe")
	proto.RegisterType((*PreparePackedMessageExeIndication)(nil), "proto.PreparePackedMessageExeIndication")
	proto.RegisterType((*PreparePackedMessageProp)(nil), "proto.PreparePackedMessageProp")
	proto.RegisterType((*ProposeMessage)(nil), "proto.ProposeMessage")
	proto.RegisterType((*ExeResultValidateReqMessage)(nil), "proto.ExeResultValidateReqMessage")
	proto.RegisterType((*BestProposeMessage)(nil), "proto.BestProposeMessage")
	proto.RegisterType((*ExeResultValidateRespMessage)(nil), "proto.ExeResultValidateRespMessage")
	proto.RegisterType((*VoteMessage)(nil), "proto.VoteMessage")
	proto.RegisterType((*CommitMessage)(nil), "proto.CommitMessage")
	proto.RegisterType((*DKGPartPubKeyMessage)(nil), "proto.DKGPartPubKeyMessage")
	proto.RegisterType((*DKGDealMessage)(nil), "proto.DKGDealMessage")
	proto.RegisterType((*DKGDealRespMessage)(nil), "proto.DKGDealRespMessage")
	proto.RegisterType((*DKGFinishedMessage)(nil), "proto.DKGFinishedMessage")
	proto.RegisterType((*ConsensusDomainSelectedMessage)(nil), "proto.ConsensusDomainSelectedMessage")
}

func init() { proto.RegisterFile("message_cons.proto", fileDescriptor_3d1eb6dc904811c3) }

var fileDescriptor_3d1eb6dc904811c3 = []byte{
	// 1249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0x4d, 0x6b, 0x2b, 0x55,
	0x18, 0xbe, 0xf9, 0x4e, 0xde, 0x7c, 0x74, 0x3c, 0xf7, 0xa2, 0xa3, 0x96, 0x4c, 0x1d, 0x10, 0x82,
	0x42, 0x17, 0xd7, 0x82, 0x20, 0x08, 0x92, 0xa6, 0xbd, 0x96, 0xda, 0x6b, 0x38, 0x8d, 0x15, 0xdc,
	0xc8, 0x34, 0x39, 0x4d, 0x86, 0x26, 0x73, 0xc6, 0x99, 0x93, 0x9a, 0x6e, 0xfd, 0x09, 0x2e, 0xc4,
	0x95, 0x7b, 0xff, 0x81, 0xdc, 0x95, 0x0b, 0x05, 0x97, 0x82, 0x1b, 0x41, 0x18, 0xa4, 0x17, 0x37,
	0xb3, 0xf4, 0x17, 0xc8, 0xf9, 0x98, 0xc9, 0x4c, 0x9a, 0x7a, 0x73, 0xc1, 0x5e, 0x4a, 0xed, 0xaa,
	0xc9, 0xf3, 0x3c, 0xe7, 0xe4, 0xcc, 0xf3, 0xbe, 0xef, 0x79, 0xcf, 0x9c, 0x02, 0x9a, 0x10, 0xdf,
	0xb7, 0x86, 0xe4, 0xf3, 0x3e, 0x75, 0xfc, 0x4d, 0xd7, 0xa3, 0x8c, 0xa2, 0x82, 0xf8, 0xf3, 0x1a,
	0x0c, 0xe9, 0x90, 0x4a, 0xc8, 0xfc, 0x23, 0x0b, 0xda, 0x36, 0x75, 0x7c, 0xe2, 0xf8, 0x53, 0xff,
	0x40, 0x0e, 0x41, 0xdb, 0x50, 0x3a, 0xf0, 0x87, 0xbd, 0x73, 0x97, 0xe8, 0x99, 0x8d, 0x4c, 0xab,
	0xf1, 0x70, 0x5d, 0xaa, 0x37, 0x17, 0x95, 0x9b, 0x5c, 0xd3, 0xae, 0x86, 0x81, 0x51, 0x9a, 0xc8,
	0x01, 0x38, 0x1a, 0x89, 0xd6, 0x21, 0xdf, 0xb1, 0x98, 0xa5, 0x67, 0x37, 0x32, 0xad, 0x5a, 0xbb,
	0x1c, 0x06, 0x46, 0x7e, 0x60, 0x31, 0x0b, 0x0b, 0xd4, 0x7c, 0x9a, 0x81, 0xbc, 0x90, 0x55, 0xa1,
	0xf4, 0x89, 0x73, 0xea, 0xd0, 0x2f, 0x1d, 0xed, 0x1e, 0x5a, 0x83, 0xea, 0xf6, 0x61, 0x87, 0x4e,
	0x2c, 0xdb, 0x39, 0x24, 0x63, 0x2d, 0x83, 0x1a, 0x00, 0x5d, 0x8f, 0xb8, 0x96, 0x47, 0x76, 0x66,
	0x44, 0xcb, 0xa2, 0xfb, 0xb0, 0x36, 0xff, 0xbe, 0xe7, 0x0c, 0xec, 0xbe, 0x96, 0xe3, 0xa3, 0x14,
	0xd8, 0xf5, 0xa8, 0xab, 0xe5, 0xf9, 0x9c, 0xfc, 0x13, 0xf5, 0x89, 0x56, 0x40, 0x0f, 0x40, 0xdb,
	0x99, 0x11, 0x7c, 0x78, 0x64, 0x8d, 0xed, 0x81, 0xc5, 0x08, 0x26, 0x5f, 0x68, 0x45, 0x3e, 0xa6,
	0x4d, 0x7c, 0x16, 0xc9, 0x4a, 0xa8, 0x0c, 0xf9, 0x23, 0xca, 0x88, 0x56, 0x46, 0x00, 0xc5, 0x6d,
	0x3a, 0x99, 0xd8, 0x4c, 0xab, 0x88, 0xdf, 0xb7, 0x3c, 0xd6, 0x9d, 0x1e, 0xef, 0x93, 0x73, 0x0d,
	0xf8, 0xcc, 0x9d, 0xfd, 0x47, 0x1d, 0x62, 0x8d, 0xb5, 0x2a, 0x9f, 0x43, 0x7d, 0xc1, 0xc4, 0x77,
	0xb5, 0x9a, 0x02, 0x76, 0x6d, 0xc7, 0xf6, 0x47, 0x64, 0xa0, 0xd5, 0xcd, 0x1f, 0xf2, 0xf0, 0x4a,
	0xb4, 0x34, 0xab, 0x7f, 0x4a, 0x06, 0xca, 0xb7, 0x9d, 0x19, 0x41, 0x6f, 0x42, 0x69, 0x7b, 0x64,
	0xd9, 0xce, 0x5e, 0x47, 0x98, 0x5c, 0x93, 0x36, 0xf6, 0x25, 0x84, 0x23, 0x8e, 0xcb, 0x8e, 0x88,
	0xe7, 0xdb, 0xd4, 0x11, 0x4e, 0xd6, 0xa5, 0xec, 0x4c, 0x42, 0x38, 0xe2, 0x90, 0x01, 0x85, 0x1d,
	0x97, 0xf6, 0x47, 0x7a, 0x6e, 0x23, 0xd3, 0xca, 0xb7, 0x2b, 0x61, 0x60, 0x14, 0x08, 0x07, 0xb0,
	0xc4, 0xb9, 0x00, 0xd3, 0xa9, 0x33, 0xd0, 0xf3, 0x97, 0x04, 0x02, 0x47, 0x6f, 0x43, 0xe5, 0xd0,
	0x1e, 0x3a, 0x16, 0x9b, 0x7a, 0x44, 0x2f, 0x88, 0x15, 0xd5, 0xc3, 0xc0, 0xa8, 0xf8, 0x11, 0x88,
	0xe7, 0x3c, 0x32, 0xa1, 0x28, 0x3d, 0xd1, 0x8b, 0x42, 0x09, 0x61, 0x60, 0x14, 0x5d, 0x81, 0x60,
	0xc5, 0xa0, 0xf7, 0x61, 0xad, 0x6b, 0x79, 0xc4, 0x61, 0xed, 0x31, 0xed, 0x9f, 0x7e, 0x68, 0xf9,
	0x23, 0xbd, 0x24, 0xc4, 0xf7, 0xc3, 0xc0, 0x58, 0x73, 0xd3, 0x14, 0x5e, 0xd4, 0xa2, 0x16, 0x94,
	0x8f, 0xf0, 0x6e, 0xd7, 0xa3, 0xf4, 0x44, 0x2f, 0x8b, 0x71, 0xb5, 0x30, 0x30, 0xca, 0x67, 0xde,
	0x89, 0xc0, 0x70, 0xcc, 0xa2, 0x2d, 0x68, 0x44, 0x9f, 0xd5, 0xa2, 0x2a, 0x4b, 0xf4, 0x0b, 0x1a,
	0x3e, 0xff, 0x47, 0xd6, 0xd4, 0xe9, 0x8f, 0x88, 0xa7, 0xc3, 0xb2, 0xf9, 0x23, 0x16, 0x6d, 0x41,
	0xed, 0x90, 0x59, 0x8c, 0x44, 0x71, 0xa8, 0x0a, 0x07, 0xb5, 0x30, 0x30, 0x6a, 0x7e, 0x02, 0xc7,
	0x29, 0x15, 0xb7, 0xa8, 0x37, 0xc3, 0x94, 0x32, 0xbd, 0x36, 0xb7, 0x88, 0x09, 0x04, 0x2b, 0x06,
	0xbd, 0x0a, 0xb9, 0xde, 0xcc, 0xd7, 0xeb, 0x1b, 0xb9, 0x56, 0xad, 0x5d, 0x0a, 0x03, 0x23, 0xc7,
	0x66, 0x3e, 0xe6, 0x98, 0xf9, 0x24, 0x0b, 0x6f, 0x5c, 0x91, 0x3a, 0x22, 0xef, 0x2d, 0xc6, 0x7f,
	0xe4, 0xd6, 0x27, 0xd1, 0xa2, 0xf7, 0xa5, 0x55, 0xbc, 0x37, 0x9f, 0x14, 0x40, 0x5f, 0x66, 0x1e,
	0x2f, 0xf7, 0xbb, 0xc2, 0xfb, 0xcf, 0x0a, 0xef, 0xbd, 0x2b, 0x0a, 0x0f, 0x85, 0x81, 0xd1, 0x88,
	0xf4, 0x92, 0x59, 0xb5, 0xfc, 0xc6, 0x0a, 0x7b, 0x21, 0xe5, 0xb7, 0x05, 0xb5, 0xde, 0x0c, 0x13,
	0x7f, 0x3a, 0x66, 0x42, 0x59, 0x17, 0x4a, 0x31, 0x33, 0x4b, 0xe0, 0x38, 0xa5, 0xe2, 0x89, 0xd1,
	0x9b, 0x71, 0xa7, 0x7c, 0xbd, 0x21, 0x0a, 0x57, 0x24, 0x06, 0x93, 0x10, 0x8e, 0x38, 0xf4, 0x2e,
	0xd4, 0xa3, 0x61, 0x52, 0xbc, 0x26, 0xc4, 0x2f, 0x85, 0x81, 0x51, 0x67, 0x49, 0x02, 0xa7, 0x75,
	0xe6, 0x57, 0x79, 0x68, 0xa8, 0xbe, 0x14, 0x35, 0xe4, 0xbb, 0x32, 0xbf, 0x2a, 0xc6, 0x07, 0xd6,
	0xac, 0xeb, 0xd9, 0x2a, 0x4f, 0xc5, 0xcc, 0x13, 0x81, 0x60, 0xc5, 0xf0, 0x3c, 0x53, 0x66, 0x7a,
	0xc9, 0xb6, 0xe0, 0x2a, 0x0c, 0xc7, 0x6c, 0x32, 0xae, 0xf0, 0x3c, 0x71, 0xad, 0xae, 0x16, 0x57,
	0x6e, 0x9a, 0x2c, 0x32, 0x62, 0x0d, 0x54, 0x52, 0x0a, 0xd3, 0x8e, 0x23, 0x10, 0xcf, 0x79, 0xf3,
	0xc7, 0x1c, 0xbc, 0xce, 0x8f, 0x2d, 0x62, 0x7c, 0xe2, 0xe8, 0x72, 0x53, 0x33, 0xe2, 0x2d, 0xa8,
	0xa8, 0x55, 0x52, 0x4f, 0x65, 0x44, 0xda, 0xe7, 0x39, 0x9d, 0xce, 0x9e, 0xe2, 0xca, 0xd9, 0x53,
	0x5a, 0x39, 0x7b, 0xca, 0x2b, 0x65, 0x4f, 0x22, 0xde, 0x95, 0xe7, 0x89, 0x37, 0xac, 0x58, 0xc7,
	0xdf, 0xe7, 0x00, 0x25, 0xce, 0x98, 0x77, 0xb5, 0xfc, 0x02, 0x6b, 0x79, 0x93, 0xbf, 0x12, 0x50,
	0xf7, 0xc0, 0x1f, 0x8a, 0x77, 0x10, 0x58, 0x22, 0x4e, 0x0a, 0xcc, 0x9f, 0x73, 0xb0, 0xbe, 0xa4,
	0xdc, 0x7c, 0xf7, 0xa6, 0x46, 0xad, 0x05, 0xe5, 0x9d, 0x19, 0xe9, 0x4f, 0x17, 0xca, 0x8d, 0x28,
	0x0c, 0xc7, 0xec, 0x4d, 0xa9, 0xb6, 0x16, 0x94, 0x7b, 0x33, 0x71, 0x00, 0x88, 0xca, 0x4d, 0x2c,
	0x98, 0x29, 0x0c, 0xc7, 0x2c, 0x3f, 0x55, 0x44, 0x85, 0xa4, 0xf4, 0xb2, 0xe2, 0xc4, 0xa9, 0x82,
	0xa5, 0x18, 0xbc, 0xa0, 0x34, 0xff, 0xce, 0x42, 0x95, 0xbf, 0xc6, 0xdd, 0x8a, 0x62, 0x33, 0xa0,
	0xc0, 0x9f, 0xc5, 0x53, 0x51, 0x13, 0xb3, 0x9d, 0x71, 0x00, 0x4b, 0xfc, 0x1a, 0xa3, 0x95, 0xea,
	0x55, 0x95, 0x67, 0xf4, 0xaa, 0xdf, 0xb2, 0x50, 0x97, 0x6f, 0xcc, 0x77, 0x7b, 0xdc, 0xea, 0xae,
	0x96, 0x9f, 0xe1, 0xea, 0x77, 0x59, 0x78, 0xd0, 0xd9, 0x7f, 0x34, 0xbf, 0x7e, 0xb8, 0x1e, 0x73,
	0x79, 0x7b, 0xf3, 0xec, 0xe1, 0x90, 0x78, 0x8f, 0xa7, 0x93, 0x63, 0xe2, 0x29, 0x93, 0x65, 0x7b,
	0x4b, 0x12, 0x38, 0xad, 0x4b, 0x7b, 0x9a, 0x5f, 0xd9, 0xd3, 0xc2, 0x95, 0x9e, 0x6e, 0x26, 0xef,
	0x5a, 0x94, 0xf7, 0x8d, 0x30, 0x30, 0xc0, 0x8d, 0x51, 0x9c, 0x50, 0x98, 0x5f, 0x67, 0xa1, 0xa1,
	0xee, 0x5f, 0x6e, 0xbb, 0x35, 0x2d, 0x28, 0xf3, 0xc7, 0x14, 0xbd, 0xac, 0x38, 0xdf, 0xed, 0x07,
	0x0a, 0xc3, 0x31, 0x6b, 0x7e, 0x93, 0x05, 0x94, 0xb8, 0x94, 0xfa, 0x1f, 0x18, 0xc3, 0x1f, 0x73,
	0xd1, 0x18, 0x4f, 0x61, 0x38, 0x66, 0xcd, 0x9f, 0xa4, 0x31, 0xd1, 0xe5, 0xdc, 0x6d, 0x37, 0xc6,
	0x84, 0xe2, 0x63, 0x3a, 0x20, 0x7b, 0x9d, 0xe4, 0x26, 0xe6, 0x08, 0x04, 0x2b, 0x06, 0x3d, 0x84,
	0x7a, 0x77, 0x7a, 0xdc, 0xa5, 0xe3, 0x73, 0xb9, 0x7b, 0xab, 0x2e, 0x92, 0x76, 0x30, 0x2d, 0x31,
	0xff, 0xca, 0x41, 0x33, 0xbe, 0x05, 0x8e, 0x6f, 0x6a, 0x49, 0x9f, 0x5d, 0x97, 0xa5, 0x29, 0x67,
	0x72, 0x2b, 0x3b, 0x93, 0xff, 0xd7, 0x5a, 0x12, 0xeb, 0xde, 0xeb, 0x24, 0x4f, 0x4e, 0x03, 0x85,
	0xe1, 0x98, 0xe5, 0x9b, 0xfc, 0x01, 0xe1, 0xe1, 0x51, 0xc1, 0x2c, 0x8a, 0x65, 0x8a, 0x4d, 0x7e,
	0x92, 0xc0, 0x71, 0x4a, 0xc5, 0x8f, 0x2f, 0xd2, 0xdf, 0x8f, 0x4f, 0x24, 0xae, 0x6c, 0x15, 0xc7,
	0x17, 0x27, 0xc5, 0xe0, 0x05, 0x25, 0xfa, 0x00, 0x34, 0x8e, 0x60, 0x3a, 0x26, 0xf1, 0x68, 0xd9,
	0xb0, 0x1f, 0x84, 0x81, 0xa1, 0x39, 0x0b, 0x1c, 0xbe, 0xa4, 0x46, 0xbb, 0x80, 0x38, 0xf6, 0x29,
	0xb1, 0x87, 0x23, 0x16, 0xcf, 0x51, 0x11, 0x73, 0xbc, 0x1c, 0x06, 0x06, 0x72, 0x2e, 0xb1, 0x78,
	0xc9, 0x88, 0xb6, 0xf1, 0xcb, 0x45, 0x33, 0xf3, 0xeb, 0x45, 0x33, 0xf3, 0xfb, 0x45, 0x33, 0xf3,
	0xe7, 0x45, 0x33, 0xf3, 0xed, 0xd3, 0xe6, 0xbd, 0xcf, 0x2a, 0xfd, 0x28, 0xf4, 0xc7, 0x45, 0xf1,
	0x1f, 0x81, 0x77, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x95, 0x7d, 0x53, 0x1d, 0x68, 0x18, 0x00,
	0x00,
}

func (m *ConsensusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgType != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreparePackedMessageExe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreparePackedMessageExe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreparePackedMessageExe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.TxRoot) > 0 {
		i -= len(m.TxRoot)
		copy(dAtA[i:], m.TxRoot)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxRoot)))
		i--
		dAtA[i] = 0x62
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Launcher) > 0 {
		i -= len(m.Launcher)
		copy(dAtA[i:], m.Launcher)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Launcher)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.VRFProofPubKey) > 0 {
		i -= len(m.VRFProofPubKey)
		copy(dAtA[i:], m.VRFProofPubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.VRFProofPubKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VRFProof) > 0 {
		i -= len(m.VRFProof)
		copy(dAtA[i:], m.VRFProof)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.VRFProof)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParentBlockHash) > 0 {
		i -= len(m.ParentBlockHash)
		copy(dAtA[i:], m.ParentBlockHash)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ParentBlockHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreparePackedMessageExeIndication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreparePackedMessageExeIndication) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreparePackedMessageExeIndication) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PreparePackedMessageProp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreparePackedMessageProp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreparePackedMessageProp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResultHashs) > 0 {
		for iNdEx := len(m.TxResultHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxResultHashs[iNdEx])
			copy(dAtA[i:], m.TxResultHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxResultHashs[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.TxHashs) > 0 {
		for iNdEx := len(m.TxHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashs[iNdEx])
			copy(dAtA[i:], m.TxHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxHashs[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.TxResultRoot) > 0 {
		i -= len(m.TxResultRoot)
		copy(dAtA[i:], m.TxResultRoot)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxResultRoot)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.TxRoot) > 0 {
		i -= len(m.TxRoot)
		copy(dAtA[i:], m.TxRoot)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxRoot)))
		i--
		dAtA[i] = 0x62
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Launcher) > 0 {
		i -= len(m.Launcher)
		copy(dAtA[i:], m.Launcher)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Launcher)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.VRFProofPubKey) > 0 {
		i -= len(m.VRFProofPubKey)
		copy(dAtA[i:], m.VRFProofPubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.VRFProofPubKey)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.VRFProof) > 0 {
		i -= len(m.VRFProof)
		copy(dAtA[i:], m.VRFProof)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.VRFProof)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ParentBlockHash) > 0 {
		i -= len(m.ParentBlockHash)
		copy(dAtA[i:], m.ParentBlockHash)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ParentBlockHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockHead) > 0 {
		i -= len(m.BlockHead)
		copy(dAtA[i:], m.BlockHead)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.BlockHead)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.TxResultHashs) > 0 {
		for iNdEx := len(m.TxResultHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxResultHashs[iNdEx])
			copy(dAtA[i:], m.TxResultHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxResultHashs[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TxHashs) > 0 {
		for iNdEx := len(m.TxHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashs[iNdEx])
			copy(dAtA[i:], m.TxHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxHashs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MaxPri) > 0 {
		i -= len(m.MaxPri)
		copy(dAtA[i:], m.MaxPri)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.MaxPri)))
		i--
		dAtA[i] = 0x42
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExeResultValidateReqMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExeResultValidateReqMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExeResultValidateReqMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResultHashs) > 0 {
		for iNdEx := len(m.TxResultHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxResultHashs[iNdEx])
			copy(dAtA[i:], m.TxResultHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxResultHashs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TxHashs) > 0 {
		for iNdEx := len(m.TxHashs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxHashs[iNdEx])
			copy(dAtA[i:], m.TxHashs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxHashs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BestProposeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BestProposeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BestProposeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PropMsgData) > 0 {
		i -= len(m.PropMsgData)
		copy(dAtA[i:], m.PropMsgData)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PropMsgData)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MaxPri) > 0 {
		i -= len(m.MaxPri)
		copy(dAtA[i:], m.MaxPri)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.MaxPri)))
		i--
		dAtA[i] = 0x42
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExeResultValidateRespMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExeResultValidateRespMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExeResultValidateRespMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TxResultProofs) > 0 {
		for iNdEx := len(m.TxResultProofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxResultProofs[iNdEx])
			copy(dAtA[i:], m.TxResultProofs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxResultProofs[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.TxProofs) > 0 {
		for iNdEx := len(m.TxProofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxProofs[iNdEx])
			copy(dAtA[i:], m.TxProofs[iNdEx])
			i = encodeVarintMessageCons(dAtA, i, uint64(len(m.TxProofs[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockHead) > 0 {
		i -= len(m.BlockHead)
		copy(dAtA[i:], m.BlockHead)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.BlockHead)))
		i--
		dAtA[i] = 0x4a
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommitMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockHead) > 0 {
		i -= len(m.BlockHead)
		copy(dAtA[i:], m.BlockHead)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.BlockHead)))
		i--
		dAtA[i] = 0x42
	}
	if m.StateVersion != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.StateVersion))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Round != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGPartPubKeyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGPartPubKeyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGPartPubKeyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PartPubKey) > 0 {
		i -= len(m.PartPubKey)
		copy(dAtA[i:], m.PartPubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PartPubKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.TriggerNumber != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.TriggerNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGDealMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGDealMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGDealMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DealData) > 0 {
		i -= len(m.DealData)
		copy(dAtA[i:], m.DealData)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.DealData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.TriggerNumber != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.TriggerNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGDealRespMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGDealRespMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGDealRespMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RespData) > 0 {
		i -= len(m.RespData)
		copy(dAtA[i:], m.RespData)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.RespData)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.TriggerNumber != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.TriggerNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DKGFinishedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DKGFinishedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DKGFinishedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PubPolyCommit) > 0 {
		i -= len(m.PubPolyCommit)
		copy(dAtA[i:], m.PubPolyCommit)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubPolyCommit)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if m.TriggerNumber != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.TriggerNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusDomainSelectedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusDomainSelectedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusDomainSelectedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NodeWeightOfMember != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.NodeWeightOfMember))
		i--
		dAtA[i] = 0x48
	}
	if m.NodeRoleOfMember != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.NodeRoleOfMember))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NodeIDOfMember) > 0 {
		i -= len(m.NodeIDOfMember)
		copy(dAtA[i:], m.NodeIDOfMember)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.NodeIDOfMember)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MemberNumber != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.MemberNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DomainID) > 0 {
		i -= len(m.DomainID)
		copy(dAtA[i:], m.DomainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.DomainID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Version != 0 {
		i = encodeVarintMessageCons(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMessageCons(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageCons(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageCons(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ConsensusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgType != 0 {
		n += 1 + sovMessageCons(uint64(m.MsgType))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreparePackedMessageExe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.ParentBlockHash)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.VRFProof)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.VRFProofPubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Launcher)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.TxRoot)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreparePackedMessageExeIndication) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PreparePackedMessageProp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.ParentBlockHash)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.VRFProof)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.VRFProofPubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Launcher)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.TxRoot)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.TxResultRoot)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if len(m.TxHashs) > 0 {
		for _, b := range m.TxHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if len(m.TxResultHashs) > 0 {
		for _, b := range m.TxResultHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ProposeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.MaxPri)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if len(m.TxHashs) > 0 {
		for _, b := range m.TxHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if len(m.TxResultHashs) > 0 {
		for _, b := range m.TxResultHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	l = len(m.BlockHead)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExeResultValidateReqMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	if len(m.TxHashs) > 0 {
		for _, b := range m.TxHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if len(m.TxResultHashs) > 0 {
		for _, b := range m.TxResultHashs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BestProposeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.MaxPri)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PropMsgData)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExeResultValidateRespMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	if len(m.TxProofs) > 0 {
		for _, b := range m.TxProofs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if len(m.TxResultProofs) > 0 {
		for _, b := range m.TxResultProofs {
			l = len(b)
			n += 1 + l + sovMessageCons(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.BlockHead)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CommitMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.Epoch != 0 {
		n += 1 + sovMessageCons(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovMessageCons(uint64(m.Round))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.StateVersion != 0 {
		n += 1 + sovMessageCons(uint64(m.StateVersion))
	}
	l = len(m.BlockHead)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DKGPartPubKeyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.TriggerNumber != 0 {
		n += 1 + sovMessageCons(uint64(m.TriggerNumber))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PartPubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DKGDealMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.TriggerNumber != 0 {
		n += 1 + sovMessageCons(uint64(m.TriggerNumber))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.DealData)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DKGDealRespMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.TriggerNumber != 0 {
		n += 1 + sovMessageCons(uint64(m.TriggerNumber))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.RespData)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DKGFinishedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	if m.TriggerNumber != 0 {
		n += 1 + sovMessageCons(uint64(m.TriggerNumber))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubPolyCommit)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConsensusDomainSelectedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMessageCons(uint64(m.Version))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	l = len(m.DomainID)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.MemberNumber != 0 {
		n += 1 + sovMessageCons(uint64(m.MemberNumber))
	}
	l = len(m.NodeIDOfMember)
	if l > 0 {
		n += 1 + l + sovMessageCons(uint64(l))
	}
	if m.NodeRoleOfMember != 0 {
		n += 1 + sovMessageCons(uint64(m.NodeRoleOfMember))
	}
	if m.NodeWeightOfMember != 0 {
		n += 1 + sovMessageCons(uint64(m.NodeWeightOfMember))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageCons(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageCons(x uint64) (n int) {
	return sovMessageCons(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsensusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= ConsensusMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreparePackedMessageExe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreparePackedMessageExe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreparePackedMessageExe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockHash = append(m.ParentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockHash == nil {
				m.ParentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFProof = append(m.VRFProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VRFProof == nil {
				m.VRFProof = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProofPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFProofPubKey = append(m.VRFProofPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VRFProofPubKey == nil {
				m.VRFProofPubKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Launcher = append(m.Launcher[:0], dAtA[iNdEx:postIndex]...)
			if m.Launcher == nil {
				m.Launcher = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxRoot = append(m.TxRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxRoot == nil {
				m.TxRoot = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreparePackedMessageExeIndication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreparePackedMessageExeIndication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreparePackedMessageExeIndication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreparePackedMessageProp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreparePackedMessageProp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreparePackedMessageProp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentBlockHash = append(m.ParentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentBlockHash == nil {
				m.ParentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFProof = append(m.VRFProof[:0], dAtA[iNdEx:postIndex]...)
			if m.VRFProof == nil {
				m.VRFProof = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VRFProofPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VRFProofPubKey = append(m.VRFProofPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VRFProofPubKey == nil {
				m.VRFProofPubKey = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Launcher = append(m.Launcher[:0], dAtA[iNdEx:postIndex]...)
			if m.Launcher == nil {
				m.Launcher = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxRoot = append(m.TxRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxRoot == nil {
				m.TxRoot = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultRoot = append(m.TxResultRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.TxResultRoot == nil {
				m.TxResultRoot = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashs = append(m.TxHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxHashs[len(m.TxHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultHashs = append(m.TxResultHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxResultHashs[len(m.TxResultHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPri", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPri = append(m.MaxPri[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxPri == nil {
				m.MaxPri = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashs = append(m.TxHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxHashs[len(m.TxHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultHashs = append(m.TxResultHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxResultHashs[len(m.TxResultHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHead", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHead = append(m.BlockHead[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHead == nil {
				m.BlockHead = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExeResultValidateReqMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExeResultValidateReqMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExeResultValidateReqMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator[:0], dAtA[iNdEx:postIndex]...)
			if m.Validator == nil {
				m.Validator = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashs = append(m.TxHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxHashs[len(m.TxHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultHashs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultHashs = append(m.TxResultHashs, make([]byte, postIndex-iNdEx))
			copy(m.TxResultHashs[len(m.TxResultHashs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BestProposeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BestProposeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BestProposeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPri", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxPri = append(m.MaxPri[:0], dAtA[iNdEx:postIndex]...)
			if m.MaxPri == nil {
				m.MaxPri = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropMsgData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropMsgData = append(m.PropMsgData[:0], dAtA[iNdEx:postIndex]...)
			if m.PropMsgData == nil {
				m.PropMsgData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExeResultValidateRespMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExeResultValidateRespMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExeResultValidateRespMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxProofs = append(m.TxProofs, make([]byte, postIndex-iNdEx))
			copy(m.TxProofs[len(m.TxProofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxResultProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxResultProofs = append(m.TxResultProofs, make([]byte, postIndex-iNdEx))
			copy(m.TxResultProofs[len(m.TxResultProofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHead", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHead = append(m.BlockHead[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHead == nil {
				m.BlockHead = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateVersion", wireType)
			}
			m.StateVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHead", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHead = append(m.BlockHead[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHead == nil {
				m.BlockHead = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGPartPubKeyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGPartPubKeyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGPartPubKeyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerNumber", wireType)
			}
			m.TriggerNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartPubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartPubKey = append(m.PartPubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PartPubKey == nil {
				m.PartPubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGDealMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGDealMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGDealMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerNumber", wireType)
			}
			m.TriggerNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DealData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DealData = append(m.DealData[:0], dAtA[iNdEx:postIndex]...)
			if m.DealData == nil {
				m.DealData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGDealRespMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGDealRespMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGDealRespMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerNumber", wireType)
			}
			m.TriggerNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespData = append(m.RespData[:0], dAtA[iNdEx:postIndex]...)
			if m.RespData == nil {
				m.RespData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DKGFinishedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DKGFinishedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DKGFinishedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerNumber", wireType)
			}
			m.TriggerNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TriggerNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = append(m.NodeID[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeID == nil {
				m.NodeID = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubPolyCommit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubPolyCommit = append(m.PubPolyCommit[:0], dAtA[iNdEx:postIndex]...)
			if m.PubPolyCommit == nil {
				m.PubPolyCommit = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusDomainSelectedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusDomainSelectedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusDomainSelectedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = append(m.ChainID[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainID == nil {
				m.ChainID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainID = append(m.DomainID[:0], dAtA[iNdEx:postIndex]...)
			if m.DomainID == nil {
				m.DomainID = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberNumber", wireType)
			}
			m.MemberNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemberNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeIDOfMember", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageCons
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageCons
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeIDOfMember = append(m.NodeIDOfMember[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeIDOfMember == nil {
				m.NodeIDOfMember = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeRoleOfMember", wireType)
			}
			m.NodeRoleOfMember = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeRoleOfMember |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeWeightOfMember", wireType)
			}
			m.NodeWeightOfMember = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeWeightOfMember |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageCons(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageCons
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageCons(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageCons
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageCons
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageCons
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageCons
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageCons
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageCons        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageCons          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageCons = fmt.Errorf("proto: unexpected end of group")
)
