// Code generated by MockGen. DO NOT EDIT.
// Source: ../network/network.go

// Package transactionpool is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	actor "github.com/AsynkronIT/protoactor-go/actor"
	codec "github.com/TopiaNetwork/topia/codec"
	common "github.com/TopiaNetwork/topia/network/common"
	message "github.com/TopiaNetwork/topia/network/message"
	gomock "github.com/golang/mock/gomock"
)

// MockNetwork is a mock of Network interface.
type MockNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkMockRecorder
}

// MockNetworkMockRecorder is the mock recorder for MockNetwork.
type MockNetworkMockRecorder struct {
	mock *MockNetwork
}

// NewMockNetwork creates a new mock instance.
func NewMockNetwork(ctrl *gomock.Controller) *MockNetwork {
	mock := &MockNetwork{ctrl: ctrl}
	mock.recorder = &MockNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetwork) EXPECT() *MockNetworkMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockNetwork) Connect(listenAddr []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", listenAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockNetworkMockRecorder) Connect(listenAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockNetwork)(nil).Connect), listenAddr)
}

// ConnectToNode mocks base method.
func (m *MockNetwork) ConnectToNode(ctx context.Context, nodeNetAddr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToNode", ctx, nodeNetAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectToNode indicates an expected call of ConnectToNode.
func (mr *MockNetworkMockRecorder) ConnectToNode(ctx, nodeNetAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToNode", reflect.TypeOf((*MockNetwork)(nil).ConnectToNode), ctx, nodeNetAddr)
}

// ConnectedPeers mocks base method.
func (m *MockNetwork) ConnectedPeers() []*common.RemotePeer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectedPeers")
	ret0, _ := ret[0].([]*common.RemotePeer)
	return ret0
}

// ConnectedPeers indicates an expected call of ConnectedPeers.
func (mr *MockNetworkMockRecorder) ConnectedPeers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectedPeers", reflect.TypeOf((*MockNetwork)(nil).ConnectedPeers))
}

// Connectedness mocks base method.
func (m *MockNetwork) Connectedness(nodeID string) (common.Connectedness, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connectedness", nodeID)
	ret0, _ := ret[0].(common.Connectedness)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connectedness indicates an expected call of Connectedness.
func (mr *MockNetworkMockRecorder) Connectedness(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connectedness", reflect.TypeOf((*MockNetwork)(nil).Connectedness), nodeID)
}

// DisConnectWithNode mocks base method.
func (m *MockNetwork) DisConnectWithNode(nodeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisConnectWithNode", nodeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisConnectWithNode indicates an expected call of DisConnectWithNode.
func (mr *MockNetworkMockRecorder) DisConnectWithNode(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisConnectWithNode", reflect.TypeOf((*MockNetwork)(nil).DisConnectWithNode), nodeID)
}

// FindPeer mocks base method.
func (m *MockNetwork) FindPeer(ctx context.Context, nodeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPeer", ctx, nodeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPeer indicates an expected call of FindPeer.
func (mr *MockNetworkMockRecorder) FindPeer(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPeer", reflect.TypeOf((*MockNetwork)(nil).FindPeer), ctx, nodeID)
}

// ID mocks base method.
func (m *MockNetwork) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNetworkMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNetwork)(nil).ID))
}

// ListenAddr mocks base method.
func (m *MockNetwork) ListenAddr() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAddr")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListenAddr indicates an expected call of ListenAddr.
func (mr *MockNetworkMockRecorder) ListenAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAddr", reflect.TypeOf((*MockNetwork)(nil).ListenAddr))
}

// NatState mocks base method.
func (m *MockNetwork) NatState() (*common.NatInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatState")
	ret0, _ := ret[0].(*common.NatInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NatState indicates an expected call of NatState.
func (mr *MockNetworkMockRecorder) NatState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatState", reflect.TypeOf((*MockNetwork)(nil).NatState))
}

// PeerDetailInfo mocks base method.
func (m *MockNetwork) PeerDetailInfo(nodeID string) (*common.PeerDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PeerDetailInfo", nodeID)
	ret0, _ := ret[0].(*common.PeerDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PeerDetailInfo indicates an expected call of PeerDetailInfo.
func (mr *MockNetworkMockRecorder) PeerDetailInfo(nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerDetailInfo", reflect.TypeOf((*MockNetwork)(nil).PeerDetailInfo), nodeID)
}

// PubSubScores mocks base method.
func (m *MockNetwork) PubSubScores() []common.PubsubScore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSubScores")
	ret0, _ := ret[0].([]common.PubsubScore)
	return ret0
}

// PubSubScores indicates an expected call of PubSubScores.
func (mr *MockNetworkMockRecorder) PubSubScores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSubScores", reflect.TypeOf((*MockNetwork)(nil).PubSubScores))
}

// Publish mocks base method.
func (m *MockNetwork) Publish(ctx context.Context, toModuleNames []string, topic string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, toModuleNames, topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockNetworkMockRecorder) Publish(ctx, toModuleNames, topic, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNetwork)(nil).Publish), ctx, toModuleNames, topic, data)
}

// RegisterModule mocks base method.
func (m *MockNetwork) RegisterModule(moduleName string, pid *actor.PID, marshaler codec.Marshaler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterModule", moduleName, pid, marshaler)
}

// RegisterModule indicates an expected call of RegisterModule.
func (mr *MockNetworkMockRecorder) RegisterModule(moduleName, pid, marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterModule", reflect.TypeOf((*MockNetwork)(nil).RegisterModule), moduleName, pid, marshaler)
}

// Send mocks base method.
func (m *MockNetwork) Send(ctx context.Context, protocolID, moduleName string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, protocolID, moduleName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNetworkMockRecorder) Send(ctx, protocolID, moduleName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNetwork)(nil).Send), ctx, protocolID, moduleName, data)
}

// SendWithResponse mocks base method.
func (m *MockNetwork) SendWithResponse(ctx context.Context, protocolID, moduleName string, data []byte) ([]message.SendResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendWithResponse", ctx, protocolID, moduleName, data)
	ret0, _ := ret[0].([]message.SendResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendWithResponse indicates an expected call of SendWithResponse.
func (mr *MockNetworkMockRecorder) SendWithResponse(ctx, protocolID, moduleName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendWithResponse", reflect.TypeOf((*MockNetwork)(nil).SendWithResponse), ctx, protocolID, moduleName, data)
}

// Start mocks base method.
func (m *MockNetwork) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start.
func (mr *MockNetworkMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetwork)(nil).Start))
}

func (m *MockNetwork) Ready() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready")
	ret0 := ret[0].(bool)
	return ret0
}

func (mr *MockNetworkMockRecorder) Ready() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockNetwork)(nil).Ready()))
}

// Stop mocks base method.
func (m *MockNetwork) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockNetworkMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetwork)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockNetwork) Subscribe(ctx context.Context, topic string, localIgnore bool, validators ...message.PubSubMessageValidator) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, topic, localIgnore}
	for _, a := range validators {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNetworkMockRecorder) Subscribe(ctx, topic, localIgnore interface{}, validators ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, topic, localIgnore}, validators...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNetwork)(nil).Subscribe), varargs...)
}

// UnRegisterModule mocks base method.
func (m *MockNetwork) UnRegisterModule(moduleName string, pid *actor.PID, marshaler codec.Marshaler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnRegisterModule", moduleName, pid, marshaler)
}

// UnRegisterModule indicates an expected call of UnRegisterModule.
func (mr *MockNetworkMockRecorder) UnRegisterModule(moduleName, pid, marshaler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegisterModule", reflect.TypeOf((*MockNetwork)(nil).UnRegisterModule), moduleName, pid, marshaler)
}

// UnSubscribe mocks base method.
func (m *MockNetwork) UnSubscribe(topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSubscribe", topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSubscribe indicates an expected call of UnSubscribe.
func (mr *MockNetworkMockRecorder) UnSubscribe(topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribe", reflect.TypeOf((*MockNetwork)(nil).UnSubscribe), topic)
}
