// Code generated by MockGen. DO NOT EDIT.
// Source: tx_pool.go

// Package transactionpool is a generated GoMock package.
package transactionpool

import (
	reflect "reflect"

	actor "github.com/AsynkronIT/protoactor-go/actor"
	account "github.com/TopiaNetwork/topia/account"
	types "github.com/TopiaNetwork/topia/common/types"
	network "github.com/TopiaNetwork/topia/network"
	transaction "github.com/TopiaNetwork/topia/transaction"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionPool is a mock of TransactionPool interface.
type MockTransactionPool struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionPoolMockRecorder
}

// MockTransactionPoolMockRecorder is the mock recorder for MockTransactionPool.
type MockTransactionPoolMockRecorder struct {
	mock *MockTransactionPool
}

// NewMockTransactionPool creates a new mock instance.
func NewMockTransactionPool(ctrl *gomock.Controller) *MockTransactionPool {
	mock := &MockTransactionPool{ctrl: ctrl}
	mock.recorder = &MockTransactionPoolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionPool) EXPECT() *MockTransactionPoolMockRecorder {
	return m.recorder
}

// AddTx mocks base method.
func (m *MockTransactionPool) AddTx(tx *transaction.Transaction, local bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTx", tx, local)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTx indicates an expected call of AddTx.
func (mr *MockTransactionPoolMockRecorder) AddTx(tx, local interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTx", reflect.TypeOf((*MockTransactionPool)(nil).AddTx), tx, local)
}

// Pending mocks base method.
func (m *MockTransactionPool) Pending() map[account.Address][]*transaction.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pending")
	ret0, _ := ret[0].(map[account.Address][]*transaction.Transaction)
	return ret0
}

// Pending indicates an expected call of Pending.
func (mr *MockTransactionPoolMockRecorder) Pending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pending", reflect.TypeOf((*MockTransactionPool)(nil).Pending))
}

// PickTxs mocks base method.
func (m *MockTransactionPool) PickTxs(txsType int) []*transaction.Transaction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PickTxs", txsType)
	ret0, _ := ret[0].([]*transaction.Transaction)
	return ret0
}

// PickTxs indicates an expected call of PickTxs.
func (mr *MockTransactionPoolMockRecorder) PickTxs(txsType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickTxs", reflect.TypeOf((*MockTransactionPool)(nil).PickTxs), txsType)
}

// RemoveTxByKey mocks base method.
func (m *MockTransactionPool) RemoveTxByKey(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTxByKey", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTxByKey indicates an expected call of RemoveTxByKey.
func (mr *MockTransactionPoolMockRecorder) RemoveTxByKey(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTxByKey", reflect.TypeOf((*MockTransactionPool)(nil).RemoveTxByKey), key)
}

// RemoveTxHashs mocks base method.
func (m *MockTransactionPool) RemoveTxHashs(txHashs []string) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTxHashs", txHashs)
	ret0, _ := ret[0].([]error)
	return ret0
}

// RemoveTxHashs indicates an expected call of RemoveTxHashs.
func (mr *MockTransactionPoolMockRecorder) RemoveTxHashs(txHashs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTxHashs", reflect.TypeOf((*MockTransactionPool)(nil).RemoveTxHashs), txHashs)
}

// Reset mocks base method.
func (m *MockTransactionPool) Reset(oldHead, newHead *types.BlockHead) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", oldHead, newHead)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockTransactionPoolMockRecorder) Reset(oldHead, newHead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTransactionPool)(nil).Reset), oldHead, newHead)
}

// Size mocks base method.
func (m *MockTransactionPool) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockTransactionPoolMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTransactionPool)(nil).Size))
}

// Start mocks base method.
func (m *MockTransactionPool) Start(sysActor *actor.ActorSystem, network network.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", sysActor, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTransactionPoolMockRecorder) Start(sysActor, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransactionPool)(nil).Start), sysActor, network)
}

// UpdateTx mocks base method.
func (m *MockTransactionPool) UpdateTx(tx *transaction.Transaction, txKey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTx", tx, txKey)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTx indicates an expected call of UpdateTx.
func (mr *MockTransactionPoolMockRecorder) UpdateTx(tx, txKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTx", reflect.TypeOf((*MockTransactionPool)(nil).UpdateTx), tx, txKey)
}
